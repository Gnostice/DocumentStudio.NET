<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gnostice.Documents</name>
    </assembly>
    <members>
        <member name="T:Gnostice.Documents.DocumentManager">
            <summary>
             This class represents the DocumentManager component.
             </summary>
            <value>
             You can either use the static method LoadDocument to load a document or use an instance of this class to perform document loading operations.
             Using the instance allows DocumentManager to keep track of the open documents, which can later be accessed via the Documents property, and 
             closed using the CloseDocument or CloseAllDocuments methods.
            
             Example: Load input document(s), perform operation(s), and close the loaded document(s).
             <code lang="c#">
             static void Main(string[] args) 
             {
               // Initialize a document manager instance
               DocumentManager dm = new DocumentManager();
            
               // Load a DOCX document
               dm.LoadDocument("sample.docx");
            
               // Do some operation on the DOCX document
               // ...
            
               // Close the loaded document
               dm.CloseAllDocuments();
             }
             </code>
            
             Each loaded document can be accessed from the <see cref="!:Gnostice.Documents.IDocument" text="IDocument" />
             list provided by the <see cref="P:Gnostice.Documents.DocumentManager.Documents" text="DocumentManager.Documents" />
             property.
            
             DocumentManager also exposes an event that can be
             handled to <see cref="!:Gnostice.Documents.DocumentManager.DocumentEn" text="supply password for encrypted input files" />.
             </value>
        </member>
        <member name="M:Gnostice.Documents.DocumentManager.#ctor">
            <summary>
            Creates a new instance of the DocumentManager component.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.DocumentManager.Documents">
            <summary>
            List of all documents currently loaded by the document manager component.
            </summary>
        </member>
        <member name="E:Gnostice.Documents.DocumentManager.DocumentEngineIdentified">
            <summary>
            Called when a document engine has been identified.
            </summary>
        </member>
        <member name="M:Gnostice.Documents.DocumentManager.LoadDocument(System.String,System.String)">
            <summary>
            Loads a document from specified file and decrypt with specified password.
            </summary>
            <param name="fileName">File from which the document needs
                                   to be loaded.</param>
            <param name="password">Password with which the document
                                   needs to be decrypted.</param>
        </member>
        <member name="M:Gnostice.Documents.DocumentManager.LoadDocument(System.IO.Stream,System.String)">
            <summary>
            Loads a document from specified stream and decrypt with
            specified password.
            </summary>
            <param name="stream">Stream from which the document needs
                                 to be loaded.</param>
            <param name="password">Password with which the document needs
                                   to be decrypted.</param>
        </member>
        <member name="M:Gnostice.Documents.DocumentManager.GetFileInfo(System.String,System.String,System.EventHandler{Gnostice.Core.NeedPasswordEventArgs})">
            <summary>
            Returns file information such as MIME type, size, whether open password is required to open the document and other essential information.
            </summary>
            <param name="fileName">FileName of the file for which file information needs to be retrieved.</param>
            <param name="password">Open/Permissions password of the file if the file is encrypted.</param>
            <returns>File information such as MIME type, size, whether open password is required to open the document.</returns>
        </member>
        <member name="M:Gnostice.Documents.DocumentManager.GetFileInfo(System.IO.Stream,System.String,System.EventHandler{Gnostice.Core.NeedPasswordEventArgs})">
            <summary>
            Returns file information such as MIME type, size, whether open password is required to open the document and other essential information.
            </summary>
            <param name="stream">Stream of the file for which file information needs to be retrieved.</param>
            <param name="password">Open/Permissions password of the file if the file is encrypted.</param>
            <returns>File information such as MIME type, size, whether open password is required to open the document.</returns>
        </member>
        <member name="M:Gnostice.Documents.DocumentManager.CloseDocument(Gnostice.Core.DOM.IDocument)">
            <summary>
            Close specified document.
            </summary>
            <param name="doc">Document that needs to be closed.</param>
        </member>
        <member name="M:Gnostice.Documents.DocumentManager.CloseAllDocuments">
            <summary>
            Closes all loaded documents.
            </summary>
        </member>
        <member name="M:Gnostice.Documents.DocumentManager.LoadDocument(System.String,System.IO.Stream,System.String,System.EventHandler{Gnostice.Core.DocumentEngineIdentifiedEventArgs})">
            <summary>
            Attempts to load a document using the appropriate engine that can handle the document given either the filename with path of the document or the stream of document data.
            Note that parameter fileNameWithPath takes precedence over stream.
            </summary>
            <param name="fileNameWithPath">File name with full path or null if stream is being passed.</param>
            <param name="stream">Stream of data.</param>
            <param name="needPasswordEventHandler">Event handler that is called if a password is required to open the document.</param>
            <returns>Document object.</returns>
        </member>
        <member name="P:Gnostice.Documents.DOM.Fields.MergeField.TextBefore">
            <summary>
            Gets or Sets the Text to be inserted before the Merge Field
            </summary>
        </member>
        <member name="P:Gnostice.Documents.DOM.Fields.MergeField.TextAfter">
            <summary>
            Gets or Sets the Text to be inserted after the Merge Field
            </summary>
        </member>
        <member name="P:Gnostice.Documents.DOM.Number.DependentID">
            <summary>
            DependentID is for Concrete number, which are based on some abstract numbers
            </summary>
        </member>
        <member name="P:Gnostice.Documents.DOM.TextLine.LineSpace">
            <summary>
            Space between current line and the line which is above it. Exclusive of previous line
            height. This will also include Paragraph spacing (if any),  
            </summary>
        </member>
        <member name="P:Gnostice.Documents.DOM.TextLine.LastLineOfPara">
            <summary>
            Get or sets whether the text line is the last layouted line of a paragraph
            </summary>
        </member>
        <member name="T:Gnostice.Documents.FileEncoding">
            <summary>
            Defines text file encoding schemes.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.FileEncoding.ISO_8859_1">
            <summary>
            US ASCII.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.FileEncoding.UTF_8">
            <summary>
            ISO 88859-1 (Windows-28591 codepage).
            </summary>
        </member>
        <member name="F:Gnostice.Documents.FileEncoding.UTF_16BE">
            <summary>
            UTF-8
            </summary>
        </member>
        <member name="F:Gnostice.Documents.FileEncoding.UTF_16LE">
            <summary>
            UTF-16BE 
            </summary>
        </member>
        <member name="T:Gnostice.Documents.KeyBindableControls">
            <summary>
            Defines controls for which key bindings have been specified.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.KeyBindableBehaviors">
            <summary>
            Defines control operations for which keyboard shortcuts have
            been specified.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.KeyBindableBehaviors.LastPage">
            <summary>
            \Navigation to the first page. 
            </summary>
        </member>
        <member name="F:Gnostice.Documents.KeyBindableBehaviors.NextPage">
            <summary>
            \Navigation to the first page. 
            </summary>
        </member>
        <member name="F:Gnostice.Documents.KeyBindableBehaviors.PreviousPage">
            <summary>
            \Navigation to the next page. 
            </summary>
        </member>
        <member name="F:Gnostice.Documents.KeyBindableBehaviors.StartOfPage">
            <summary>
            \Navigation to the previous page. 
            </summary>
        </member>
        <member name="F:Gnostice.Documents.KeyBindableBehaviors.EndOfPage">
            <summary>
            \Navigation to the beginning of the current page.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.KeyBindableBehaviors.ZoomIn">
            <summary>
            \Navigation to the end of the current page. 
            </summary>
        </member>
        <member name="F:Gnostice.Documents.KeyBindableBehaviors.ZoomOut">
            <summary>
            Increase page magnification.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.KeyBindableBehaviors.RotateClockwise">
            <summary>
            Decrease page magnification.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.KeyBindableBehaviors.RotateAntiClockwise">
            <summary>
            Rotation of contents of all pages in clockwise direction.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.KeyBindableBehaviors.RotateCurrentPageClockwise">
            <summary>
            Rotation of contents of all pages in counter-clockwise
            direction.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.KeyBindableBehaviors.RotateCurrentPageAnticlockwise">
            <summary>
            Rotation of current page contents in clockwise direction.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.ConversionMode">
            <summary>
            Defines how input documents need to be converted by the <see cref="!:Gnostice.Documents.DocumentConverter.ConvertToFile@Object@string@string@string@ConversionMode@ConverterSettings@EncoderSettings@string" text="DocumentConverter.ConvertToFile" />
            or <see cref="!:Gnostice.Documents.DocumentConverter.ConvertToStream@Object@string@ConversionMode@ConverterSettings@EncoderSettings@string" text="DocumentConverter.ConvertToStream" />
            methods.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.ConversionMode.ConvertToSeperateFiles">
            <summary>
            Merge all documents to a single file.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.ConversionMode.ConvertFirstFileAndAttachRestAsOriginal">
            <summary>
            Convert documents to separate files.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.ConversionMode.CreateNewFileAndAttachAllAsOriginal">
            <summary>
            Convert first file and embed the rest of the files in the
            first one. 
            </summary>
        </member>
        <member name="T:Gnostice.Documents.PortfolioCreationMode">
            <summary>
            Defines when a PDF portfolio is created by the document
            converter.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PortfolioCreationMode.Always">
            <summary>
            Never.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PortfolioCreationMode.WhenInputIsPortfolio">
            <summary>
            Always.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.PortfolioLayoutMode">
            <summary>
            Defines how viewer applications are required to layout the
            portfolio contents by default.
            </summary>
            <example>
                <img name="ANIMATION-XDoc-dotNET-PDF-Portfolio-Layout-Mode" />
            </example>
        </member>
        <member name="F:Gnostice.Documents.PortfolioLayoutMode.Tile">
            <summary>
            Display tabulated file details.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PortfolioLayoutMode.Hidden">
            <summary>
            Show thumbnails of the files.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.PageSize">
            <summary>
            Defines page sizes.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.LetterSmall">
            <summary>
            Letter Paper - 8.5 x 11.0 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.Tabloid">
            <summary>
            Letter Small Paper - 11.0 x 8.5 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.Ledger">
            <summary>
            Tabloid Paper - 11 x 17 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.Legal">
            <summary>
            Ledger Paper - 4.3 x 9.1 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.Statement">
            <summary>
            Legal Paper - 8.5 x 14.0 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.Executive">
            <summary>
            Statement Paper - 5.5 x 8.5 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.A3">
            <summary>
            Executive Paper - 34.0 x 44.0 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.A4">
            <summary>
            A3 Paper - 11.7 x 16.5 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.A4Small">
            <summary>
            A4 Paper - 8.3 x 11.7 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.A5">
            <summary>
            A4 Small Paper - 8.3 x 11.7 inches
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.B4">
            <summary>
            A5 Paper - 5.8 x 8.3 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.B5">
            <summary>
            B4 Paper - 9.8 x 13.9 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.Folio">
            <summary>
            B5 Paper - 6.9 x 9.8 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.Quarto">
            <summary>
            Folio Paper - 7.2 x 10.5 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.ps10X14">
            <summary>
            Quarto Paper - 3.6 x 6.5 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.Env10">
            <summary>
            \Note Paper - 3.9 x 7.5 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.Env11">
            <summary>
            Number 10 Envelope - 9.5 x 4.1 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.Env12">
            <summary>
            Size 11 Envelope - 4.1 x 9.5 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.Env14">
            <summary>
            Size 12 Envelope - 4.5 x 10.4 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.CSheet">
            <summary>
            Size 14 Envelope - 4.8 x 11.0 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.DSheet">
            <summary>
            C Paper - 4.5 x 6.4 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.ESheet">
            <summary>
            D Paper - 17.0 x 22.0 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.EnvDL">
            <summary>
            E Paper - 22.0 x 34.0 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.EnvC5">
            <summary>
            DL (Dimension Lengthwise) Envelope - 8.7 x 4.3 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.EnvC3">
            <summary>
            C5 Envelope - 9.0 x 6.4 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.EnvC4">
            <summary>
            C3 Envelope (as per ISO 269) - 12.8 x 18.0 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.EnvC6">
            <summary>
            C4 Envelope (as per ISO 269) - 9.0 x 12.8 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.EnvC65">
            <summary>
            C6 Envelope (as per ISO 269) - 4.5 x 9.0 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.EnvB4">
            <summary>
            C6/C5 Envelope (as per ISO 269) - 0.1 x 0.2 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.EnvB5">
            <summary>
            B4 Envelope - 9.8 x 13.9 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.EnvB6">
            <summary>
            B5 Envelope - 6.9 x 9.8 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.EnvItaly">
            <summary>
            B6 Envelope - 6.9 x 4.9 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.EnvMonarch">
            <summary>
            Italy Envelope - 9.8 x 13.9 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.EnvPersonal">
            <summary>
            Monarch Envelope - 8.3 x 11.0 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.FanfoldUS">
            <summary>
            Size 6 3/4 Envelope - 3.9 x 8.9 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.FanfoldStdGerman">
            <summary>
            US Standard Fanfold - 14.875 x 11 inches.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PageSize.Custom">
            <summary>
            ISO B4 Paper - 8.7 x 8.7 inches.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.FontEmbedType">
            <summary>
            Defines embedding mechanism for a PDF font.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.FontEmbedType.Subset">
            <summary>
            No embedding.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.FontEmbedType.Full">
            <summary>
            Subset embedding.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.RenderErrorEventArgs">
            <summary>
            This class represents details related to the <see cref="!:Gnostice.Controls.WinForms.DocumentViewer.RenderError" text="DocumentViewer.RenderError" />
            event.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.RenderErrorEventArgs.PageNumber">
            <summary>
            Gets number of the page where the error had occurred. 
            </summary>
        </member>
        <member name="P:Gnostice.Documents.RenderErrorEventArgs.RenderError">
            <summary>
            Gets exception raised by the error. 
            </summary>
        </member>
        <member name="P:Gnostice.Documents.RenderErrorEventArgs.ContinueRendering">
            <summary>
            Gets or sets whether to continue rendering. 
            </summary>
        </member>
        <member name="M:Gnostice.Documents.RenderErrorEventArgs.#ctor(System.Int32,System.Exception,System.Boolean)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="pageNum">Number of the page where the
                                  error occurred.</param>
            <param name="renderError">Exception raised by the
                                      error.</param>
            <param name="continueRendering">Whether to continue
                                            rendering.</param>
        </member>
        <member name="T:Gnostice.Documents.NewFontEncounteredEventArgs">
            <summary>
            This class represents details related to <see cref="!:Gnostice.Documents.PDFEncoderSettings.NewFontEncountered" text="PDFEncoderSettings.NewFontEncountered" />
            event. 
            </summary>
        </member>
        <member name="P:Gnostice.Documents.NewFontEncounteredEventArgs.FontName">
            <summary>
            Gets the name of the font.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.NewFontEncounteredEventArgs.FontStyle">
            <summary>
            Gets the style of the font type. 
            </summary>
        </member>
        <member name="P:Gnostice.Documents.NewFontEncounteredEventArgs.FontEmbedType">
            <summary>
            Gets or sets how the font is embedded in the PDF document.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.FormatterSettings">
            <summary>
            This class specifies how file content is formatted and
            displayed in a viewer component.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.FormatterSettings.TXT">
            <summary>
            Gets or sets settings for displaying plain text content.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.FormatterSettings.SpreadSheet">
            <summary>
            Gets or sets settings for displaying Spread Sheet content.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.Framework">
            <summary>
            This class provides a static method to activate the license
            of the product.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.Framework.Graphics">
            <summary>
            Property to specify the graphics engine to use for all rendering.
            Possible values are <see cref="!:Gnostice.Graphics.GDIPlus.GDIPlusGraphics()" /> for .NET Framework target 
            and <see cref="!:Gnostice.Graphics.Skia.SkiaGraphics()" /> for Xamarin and .NET Core.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.Framework.LoadUnsupportedFormatAsTXT">
            <summary>
            Property to specify whether unsupported and corrupted files should be loaded as plain text files.
            Note that if the file is loaded by passing in a file name then 
            </summary>
        </member>
        <member name="P:Gnostice.Documents.Framework.TextFileExtensions">
            <summary>
            List of file extensions (without the preceding dot) which should be treated as plain text files.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.Framework.WordCompatibilitySettings">
            <summary>
            Property to specify the compatibility settings for Word formats rendering
            </summary>
        </member>
        <member name="T:Gnostice.Documents.Image.BMPEncoderSettings">
            <summary>
            This class specifies bitmap format settings used when encoding BMP files.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.Image.GIFEncoderSettings">
            <summary>
            This class specifies GIF format settings used when encoding GIF files.
            </summary>
        </member>
        <member name="M:Gnostice.Documents.Image.ImageBase.UpdatePage(System.Int32)">
            <summary>
            Zero based page number to update.
            </summary>
            <param name="pageNum"></param>
        </member>
        <member name="M:Gnostice.Documents.Image.ImageBase.DisposePage(System.Int32)">
            <summary>
            Zero based page number to dispose.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.Image.JPEGEncoderSettings">
            <summary>
            This class specifies JPEG format settings used when encoding JPG files.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.Image.JPEGEncoderSettings.QualityLevel">
            <summary>
            Gets or sets JPEG quality level.
            </summary>
            <remarks>
            A quality level of 0 corresponds to the greatest compression,
            and a quality level of 100 corresponds to the least
            compression. For the best balance between size and quality,
            choose a value between 80 and 85.
            </remarks>
        </member>
        <member name="T:Gnostice.Documents.Image.PNGEncoderSettings">
            <summary>
            This class specifies PNG format settings used when encoding PNG files.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.Image.PNGEncoderSettings.FileFormat">
            <summary>
            Gets File format
            </summary>
        </member>
        <member name="P:Gnostice.Documents.Image.PNGEncoderSettings.MimeType">
            <summary>
            Gets Mime type
            </summary>
        </member>
        <member name="T:Gnostice.Documents.Image.TIFFEncoderSettings">
            <summary>
            This class specifies TIFF format settings used when encoding TIFF files.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.Image.TIFFEncoderSettings.MultiPage">
            <summary>
            Gets or sets whether the output is a multi-frame TIFF image.
            By default, it is set to true.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.Image.TIFFEncoderSettings.CompressionType">
            <summary>
            Gets or sets TIFF compression algorithm.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.Margins">
            <summary>
            This class specifies page settings
            </summary>
        </member>
        <member name="T:Gnostice.Documents.PageSettings">
            <summary>
            This class specifies page settings of a document viewer.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PageSettings.Height">
            <summary>
            Gets or sets height of each page.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PageSettings.Width">
            <summary>
            Gets or sets width of the pages.
            </summary>
        </member>
        <member name="M:Gnostice.Documents.PageSettings.GetPageSize(Gnostice.Documents.PageSize,Gnostice.Core.Graphics.Orientation)">
            <summary>
            Gets page size with orientation.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PageSettings.PageSize">
            <summary>
            Gets or sets size of the pages.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PageSettings.Margin">
            <summary>
            Gets or sets width of each page.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PageSettings.Orientation">
            <summary>
            Gets or sets orientation of the pages.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.PDF.PDFSearchElement">
            <summary>
            This class represents a result of a page element search
            operation.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Gnostice.Documents.PDF.FontUtil.GetFontFileName(System.Drawing.Font)" -->
        <member name="M:Gnostice.Documents.PDF.CstPDFDoc.WriteWatermarkText(System.String,Gnostice.Documents.PDF.PDFFont,System.Single,System.Single,System.Drawing.SolidBrush,System.Boolean,System.String)">
            <summary>
            Adds a watermark with specified text, brush and font at a
            location with specified coordinates on specified pages. The
            method will place the watermark below or above existing page
            content, as specified.
            </summary>
            <param name="str">Text that needs to be rendered as
                              the watermark.</param>
            <param name="pdfFont">Font with which the text needs to be
                                  rendered.</param>
            <param name="x">X\-coordinate of the top\-left
                            corner of the watermark.</param>
            <param name="y">Y\-coordinate of the top\-left
                            corner of the watermark.</param>
            <param name="brush">Brush with which the text needs to
                                be filled.</param>
            <param name="underlay">Whether the watermark needs to be
                                   laid beneath all existing page
                                   content.</param>
            <param name="pageRange">Pages on which the watermark needs
                                    to be rendered.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.CstPDFDoc.WriteWatermarkText(System.String,Gnostice.Documents.PDF.PDFFont,Gnostice.Documents.PDF.PDFHAlignment,Gnostice.Documents.PDF.PDFVAlignment,System.Drawing.SolidBrush,System.Boolean,System.String)">
            <summary>
            Adds specified text as a watermark on specified pages with
            specified font, alignment, brush, and underlay settings.
            </summary>
            <param name="str">Text that needs to be rendered as
                              the watermark.</param>
            <param name="pdfFont">Font with which the text needs to be
                                  rendered.</param>
            <param name="hAlign">Horizontal alignment of the
                                 watermark.</param>
            <param name="vAlign">Vertical alignment of the watermark.</param>
            <param name="brush">Brush with which the text needs to
                                be filled.</param>
            <param name="underlay">Whether the watermark needs to be
                                   laid beneath all existing page
                                   content.</param>
            <param name="pageRange">Pages on which the watermark needs
                                    to be rendered.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.CstPDFDoc.WriteWatermarkText(System.String,Gnostice.Documents.PDF.PDFFont,System.Drawing.RectangleF,System.Single,Gnostice.Documents.PDF.PDFAlignment,System.Drawing.SolidBrush,System.Boolean,System.String)">
            <summary>
            Adds specified text as a watermark in specified region on
            specified pages with specified font, rotation, alignment and
            settings. The method will place the watermark below or above
            existing page content, as specified.
            </summary>
            <param name="str">Text that needs to be rendered
                              as the watermark.</param>
            <param name="pdfFont">Font with which the text needs
                                  to be rendered.</param>
            <param name="rectF">Bounding box of the watermark on
                                the pages.</param>
            <param name="rotationAngle">Angle of rotation (in
                                        counter\-clockwise direction) of
                                        the watermark.</param>
            <param name="alignment">_nt_</param>
            <param name="brush">Brush with which the text needs to
                                be filled.</param>
            <param name="underlay">Whether the watermark needs to
                                   be laid beneath all existing
                                   page content.</param>
            <param name="pageRange">Pages on which the watermark
                                    needs to be rendered.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.CstPDFPage.WriteWatermarkText(System.String,Gnostice.Documents.PDF.PDFFont,Gnostice.Documents.PDF.PDFHAlignment,Gnostice.Documents.PDF.PDFVAlignment,System.Drawing.SolidBrush,System.Boolean)">
            <summary>
            Adds specified text as a watermark to the page with specified
            font, alignment, and brush. The method will place the
            watermark below or above existing page content, as specified.
            </summary>
            <param name="str">Text that needs to be rendered as the
                              watermark. </param>
            <param name="pdfFont">Font with which the text needs to be
                                  rendered.</param>
            <param name="hAlign">Horizontal alignment of the
                                 watermark.</param>
            <param name="vAlign">Vertical alignment of the watermark.</param>
            <param name="brush">How the text needs to be filled. </param>
            <param name="underlay">Whether the watermark needs to be
                                   laid beneath all existing page
                                   content. </param>
        </member>
        <member name="M:Gnostice.Documents.PDF.CstPDFPage.WriteWatermarkText(System.String,Gnostice.Documents.PDF.PDFFont,System.Single,System.Single,System.Drawing.SolidBrush,System.Boolean)">
            <summary>
            Adds a watermark with specified text, brush and font at a
            location with specified coordinates on the page. The method
            will place the watermark below or above existing page
            content, as specified.
            </summary>
            <param name="str">Text that needs to be rendered as the
                              watermark.</param>
            <param name="pdfFont">Font with which the text needs to be
                                  rendered.</param>
            <param name="x">X\-coordinate of the top\-left corner
                            of the watermark. </param>
            <param name="y">Y\-coordinate of the top\-left corner
                            of the watermark. </param>
            <param name="brush">Brush with which the text needs to be
                                filled. </param>
            <param name="underlay">Whether the watermark needs to be
                                   laid beneath all existing page
                                   content. </param>
        </member>
        <member name="M:Gnostice.Documents.PDF.CstPDFPage.WriteWatermarkText(System.String,Gnostice.Documents.PDF.PDFFont,System.Drawing.RectangleF,System.Single,Gnostice.Documents.PDF.PDFAlignment,System.Drawing.SolidBrush,System.Boolean)">
            <summary>
            Adds specified text as a watermark in specified region on the
            page with specified font, rotation, and alignment. The method
            will place the watermark below or above existing page
            content, as specified.
            </summary>
            <param name="str">Text that needs to be rendered
                              as the watermark.</param>
            <param name="pdfFont">Font with which the text needs
                                  to be rendered.</param>
            <param name="rectF">Bounding box of the watermark on
                                the pages.</param>
            <param name="rotationAngle">Angle of rotation (in
                                        counter\-clockwise direction) of
                                        the watermark.</param>
            <param name="alignment">How the text is aligned to the
                                    left and right edges of the
                                    bounding box.</param>
            <param name="brush">Brush with which the text needs to be
                                filled. </param>
            <param name="underlay">Whether the watermark needs to
                                   be laid beneath all existing
                                   page content.</param>
        </member>
        <member name="T:Gnostice.Documents.PDF.PDFAnnot">
            <summary>
            This class represents the base class for PDF annotation and
            form field classes.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFAnnot.Type">
            <summary>
            Gets annotation type.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFAnnot.ModifiedDate">
            <summary>
            Gets the modified date of the annotation. 
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFAnnot.IsDeleted">
            <summary>
            Gets or sets whether the annotation is to be deleted.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFAnnot.Rectangle">
            <summary>
            Gets or sets annotation rectangle.
            </summary>
            <remarks>
            The annotation rectangle defines the location and dimensions
            of the annotation on a page.
            </remarks>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFAnnot.Flag">
            <summary>
            Create a clone instance of this annotation.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFAnnot.Visible">
            <summary>
            Gets or sets with the annotation or form field is visible.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFAnnot.Printable">
            <summary>
            Gets or sets whether the annotation needs to be printable.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFAnnot.MeasurementUnit">
            <summary>
            Default measurement unit with which the annotation
            dimensions, position, and other attributes are specified.
            </summary>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFAnnot.Clone">
            <summary>
            Creates a cloned instance of this annotation or form field.
            </summary>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFAnnot.GetRectangle(Gnostice.Documents.PDF.PDFMeasurementUnit)">
            <summary>
            \Returns annotation rectangle in specified measurement unit.
            </summary>
            <param name="measurementUnit">Measurement unit with which
                                          the annotation rectangle
                                          should be returned.</param>
            <remarks>
            The annotation rectangle defines the location and dimensions
            of the annotation on a page.
            </remarks>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFAnnot.SetRectangle(System.Single,System.Single,System.Single,System.Single,Gnostice.Documents.PDF.PDFMeasurementUnit)">
            <summary>
            Sets specified annotation rectangle for this annotation.
            </summary>
            <param name="x">X\-coordinate of the
                            annotation rectangle.</param>
            <param name="y">Y\-coordinate of the
                            annotation rectangle.</param>
            <param name="width">Width of the annotation
                                rectangle.</param>
            <param name="height">Height of the annotation
                                 rectangle.</param>
            <param name="measurementUnit">Measurement unit with which
                                          the coordinates and the
                                          dimensions are applied.</param>
            <remarks>
            The annotation rectangle defines the location and dimensions
            of the annotation on a page.
            </remarks>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFDocInfo.ContainsBookmarks">
            <summary>
            Returns whether the document contains Bookmarks/Outlines.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFDocInfo.ContainsAnnotations">
            <summary>
            Returns whether the document contains interactive annotations.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFDocInfo.ContainsFormFields">
            <summary>
            Returns whether the document contains interactive form fields.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.PDF.PDFEncryptionInfo">
            <summary>
            This class includes security/encryption details of the document if the document is encrypted.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFEncryptionInfo.PDFPasswordEncryptionInfo.EncryptionLevel">
            <summary>
            Returns the encryption algorithm and level used to encrypt the document.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFEncryptionInfo.PDFPasswordEncryptionInfo.Permissions">
            <summary>
            Returns unsigned integer value of the permissions value.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFEncryptionInfo.PDFPasswordEncryptionInfo.IsOwner">
            <summary>
            Returns whether the document is opened in Owner mode using the supplied password.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFEncryptionInfo.PDFPasswordEncryptionInfo.IsUser">
            <summary>
            Returns whether the document is opened in User mode using the supplied password.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFEncryptionInfo.PDFPasswordEncryptionInfo.HasOpenPassword">
            <summary>
            Returns whether the document is encrypted using Open password.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFEncryptionInfo.PDFPasswordEncryptionInfo.HasPermissionsPassword">
            <summary>
            Returns whether the document is protected using Owner/Permissions password with certain restrictions in using the document when opened in User mode.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFEncryptionInfo.PDFPasswordEncryptionInfo.IsLowResPrintAllowed">
            <summary>
            Returns whether printing of the document at the low quality level is allowed.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFEncryptionInfo.PDFPasswordEncryptionInfo.IsModifyDocAllowed">
            <summary>
            Returns whether document modification operations such as Redaction are allowed.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFEncryptionInfo.PDFPasswordEncryptionInfo.IsContentCopyExtractAllowed">
            <summary>
            Returns whether copying/extracting the document contents is allowed.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFEncryptionInfo.PDFPasswordEncryptionInfo.IsCommentingAllowed">
            <summary>
            Returns whether modification of annotations in the document is allowed.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFEncryptionInfo.PDFPasswordEncryptionInfo.IsFormFillSignAllowed">
            <summary>
            Returns whether filling of form fields, signing the document and modification of annotations are allowed.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFEncryptionInfo.PDFPasswordEncryptionInfo.IsContentAccessibilityAllowed">
            <summary>
            Return whether the document content can be extracted for the purposes of accessibility is allowed.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFEncryptionInfo.PDFPasswordEncryptionInfo.IsAssembleDocAllowed">
            <summary>
            Returns whether assembling the document (insert, rotate, or delete pages and create document outline items or thumbnail images) is allowed.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFEncryptionInfo.PDFPasswordEncryptionInfo.IsHighResPrintAllowed">
            <summary>
            Returns whether printing of the document at the highest quality level is allowed.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.PDF.PDFVersion">
            <summary>
            Defines PDF version for a PDF document.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PDF.PDFVersion.V1_5">
            <summary>
            PDF version 1.4.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PDF.PDFVersion.V1_6">
            <summary>
            PDF version 1.5.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PDF.PDFVersion.V1_7">
            <summary>
            PDF version 1.6
            </summary>
        </member>
        <member name="T:Gnostice.Documents.PDF.Operation">
            <summary>
            Defines document-processing operations.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.PDF.PDFFormFieldAction">
            <summary>
            Defines viewer application events occurring an end-user
            interacts with a form field.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PDF.PDFFormFieldAction.MouseExit">
            <summary>
            End-user has moved the mouse pointer into a form field.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PDF.PDFFormFieldAction.MouseDown">
            <summary>
            End-user has moved the mouse pointer out of the form field.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PDF.PDFFormFieldAction.MouseReleased">
            <summary>
            End-user has clicked a mouse-button inside the form field.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PDF.PDFFormFieldAction.GotFocus">
            <summary>
            End-user has released the mouse over a form field.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PDF.PDFFormFieldAction.LostFocus">
            <summary>
            Viewer application or end-user has brought focus to a form
            field.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PDF.PDFFormFieldAction.KeyStroke">
            <summary>
            Viewer application has moved focus out of a form field.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PDF.PDFFormFieldAction.BeforeFormat">
            <summary>
            End-user has pressed a key inside a form field.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PDF.PDFFormFieldAction.Validate">
            <summary>
            Viewer application changes the value of a form field by
            executing a JavaScript script.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PDF.PDFFormFieldAction.Recalculate">
            <summary>
            Viewer application validates value in a form field.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.PDF.PDFFileInfo">
            <summary>
            This class includes PDF file related information such as Encryption information if the PDF file is encrypted.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFileInfo.EncryptionInfo">
            <summary>
            Returns security/encryption details of the document if the document is encrypted. If the document is not encrypted then null value will be returned.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.PDF.PDFFont">
            <summary>
            This class represents a PDF font.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.PDF.PDFEncoderSettings">
            <property name="autolink" value="off" />
            <summary>
            This class specifies PDF format settings for converting
            documents.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFEncoderSettings.PDFVersion">
            <summary>
            Gets or sets PDF version of the output document.
            </summary>
            <example>
                <code>
            DocumentConverter converter = new DocumentConverter();
            PDFEncoderSettings pdfEncoderSettings = new PDFEncoderSettings();
            pdfEncoderSettings.PDFVersion = Gnostice.Documents.PDF.PDFVersion.V1_4;
            converter.ConvertToFile("input.docx", "output.pdf", null, pdfEncoderSettings);
            </code>
            </example>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFEncoderSettings.FontEmbedType">
            <summary>
            Gets or sets font-embedding mechanism.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFEncoderSettings.PDFPortfolioSettings">
            <summary>
            Gets or sets PDF portfolio creation settings.
            </summary>
        </member>
        <member name="E:Gnostice.Documents.PDF.PDFEncoderSettings.NewFontEncountered">
            <summary>
            Occurs when a font is about to be included in the PDF
            document.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.PDF.PDFPortfolioSettings">
            <summary>
            Represents PDF portfolio creation settings.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFPortfolioSettings.PortfolioCreationMode">
            <summary>
            Gets or sets when a PDF portfolio should be created.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFPortfolioSettings.PortfolioLayoutMode">
            <summary>
            Gets or sets how viewer applications should lay out the PDF
            portfolio contents by default.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.PDF.SearchElementHandler">
            <summary>
            Represents an event handler that will be called by the Search method.
            </summary>
            <param name="pageNumber">Number of the page where the
                                     event was called.</param>
            <param name="continueSearch">Whether to continue the search.</param>
            <param name="searchElements">List of page elements that
                                         match the search.</param>
        </member>
        <member name="P:Gnostice.Documents.PDF.ExPlusPDFDoc.RenderingSettings">
            <summary>
            static flag isFontProcessorLoaded should be set during the execution of static constructor as it is a static variable and should be done only once for the whole application execution.
            </summary>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPlusPDFDoc.GetPageMetafile(System.Int32)">
            <summary>
            Get Metafile with the Page contents and form fields (including NonPrintable) rendered on the Metafile graphics
            </summary>
            <param name="pageNum"></param>
            <returns></returns>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPlusPDFDoc.GetPageMetafile(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get Metafile with the Page contents and form fields rendered on the Metafile graphics
            If printing flag is true then NonPrintable form fields will not be rendered on the Metafile graphics
            </summary>
            <param name="pageNum"></param>
            <param name="printing"></param>
            <returns></returns>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPlusPDFDoc.GetPageMetafile(System.Int32,System.Boolean,Gnostice.Core.Graphics.RenderingSettings)">
            <summary>
            Get Metafile with the Page contents and form fields rendered on the Metafile graphics
            If printing flag is true then NonPrintable form fields will not be rendered on the Metafile graphics
            </summary>
            <param name="pageNum"></param>
            <param name="printing"></param>
            <param name="renderOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPlusPDFDoc.GetPageMetafile(System.Int32,Gnostice.Core.Graphics.RenderingSettings)">
            <summary>
            Get Metafile with the Page contents and form fields rendered on the Metafile graphics
            </summary>
            <param name="pageNum"></param>
            <param name="printing"></param>
            <param name="renderOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPlusPDFDoc.RenderOnGraphics(System.Drawing.Graphics,System.Int32)">
            <summary>
            Get the Page contents and form fields (including NonPrintable) rendered on the given graphics
            </summary>
            <param name="g"></param>
            <param name="pageNum"></param>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPlusPDFDoc.RenderOnGraphics(System.Drawing.Graphics,System.Int32,System.Boolean)">
            <summary>
            Get the Page contents and form fields rendered on the given graphics
            If printing flag is true then NonPrintable form fields will not be rendered on the Metafile graphics
            </summary>
            <param name="g"></param>
            <param name="pageNum"></param>
            <param name="printing"></param>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPlusPDFDoc.RedactRegion(System.String,System.Drawing.RectangleF,System.Drawing.Pen,System.Drawing.Brush,System.Boolean,System.Boolean)">
            <summary>
            Redacts text in specified region in specified pages.
            </summary>
            <param name="pageRange">Pages where the redaction needs
                                    to be performed.</param>
            <param name="boundingRect">Region where the text needs to be
                                       redacted.</param>
            <param name="pen">How the region needs to be
                              stroked.</param>
            <param name="brush">How the region needs to be
                                filled.</param>
            <param name="isStroke">Whether the region needs to be
                                   stroked.</param>
            <param name="isFill">Whether the region needs to be
                                 filled.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPlusPDFDoc.RedactRegion(System.String,System.Drawing.RectangleF,System.Boolean,System.Drawing.Pen,System.Drawing.Brush,System.Boolean,System.Boolean)">
            <summary>
            Redacts text in specified region in specified pages. If
            specified, the method redacts text that only partially falls
            within the region.
            </summary>
            <param name="pageRange">Pages where the text
                                    needs to be redacted.</param>
            <param name="boundingRect">Region where the text
                                       needs to be redacted.</param>
            <param name="includeIntersectingText">Whether text falling
                                                  only partially on the
                                                  region needs to be
                                                  redacted.</param>
            <param name="pen">How the region's
                              boundary needs to be
                              stroked.</param>
            <param name="brush">How the region needs to
                                be filled.</param>
            <param name="isStroke">Whether the region
                                   needs to be stroked.</param>
            <param name="isFill">Whether the region
                                 needs to be filled.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPlusPDFDoc.RedactText(System.Int32,System.String,Gnostice.Documents.PDF.PDFSearchMode,Gnostice.Documents.PDF.PDFSearchOptions)">
            <summary>
            Redacts specified text on specified page with specified
            settings.
            </summary>
            <param name="pageNum">Number of the page where the
                                  text needs to be redacted.</param>
            <param name="searchString">Text that needs to be searched
                                       for.</param>
            <param name="searchMode">Whether the search is for a
                                     literal string or a regular
                                     expression.</param>
            <param name="searchOptions">How search occurrences are
                                        found.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPlusPDFDoc.RedactText(System.Int32,System.String,Gnostice.Documents.PDF.PDFSearchMode,Gnostice.Documents.PDF.PDFSearchOptions,System.Drawing.Pen,System.Drawing.Brush,System.Boolean,System.Boolean)">
            <summary>
            Redacts specified text on specified page, and strokes and
            fills the redacted region if specified.
            </summary>
            <param name="pageNum">Number of the page where the
                                  text needs to be redacted.</param>
            <param name="searchString">Text that needs to be searched
                                       for.</param>
            <param name="searchMode">Whether the search is for a
                                     literal string or a regular
                                     expression.</param>
            <param name="searchOptions">How search occurrences are
                                        found.</param>
            <param name="pen">System.Drawing.Pen with which the borders of
                              the redacted region needs to be
                              stroked.</param>
            <param name="brush">System.Drawing.Brush with which the redacted
                                region needs to be filled.</param>
            <param name="isStroke">Whether the borders of the
                                   redacted region needs to be
                                   stroked.</param>
            <param name="isFill">Whether the redacted region
                                 needs to be filled with the
                                 brush.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPlusPDFDoc.RedactText(System.String,System.String,Gnostice.Documents.PDF.PDFSearchMode,Gnostice.Documents.PDF.PDFSearchOptions,System.Drawing.Pen,System.Drawing.Brush,System.Boolean,System.Boolean)">
            <summary>
            Redacts specified text on specified pages, and fills and
            strokes the redacted region.
            </summary>
            <param name="pageRange">Pages where the text needs to be
                                    redacted.</param>
            <param name="searchString">Text that needs to be searched
                                       for.</param>
            <param name="searchMode">Whether the search is for a
                                     literal string or a regular
                                     expression.</param>
            <param name="searchOptions">How search occurrences are
                                        found.</param>
            <param name="pen">System.Drawing.System.Drawing.Pen with which the borders of
                              the redacted region needs to be
                              stroked.</param>
            <param name="brush">System.Drawing.Brush with which the redacted
                                region needs to be filled.</param>
            <param name="isStroke">Whether the borders of the
                                   redacted region needs to be
                                   stroked.</param>
            <param name="isFill">Whether the redacted region
                                 needs to be filled with the
                                 brush.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPlusPDFDoc.RedactText(System.Int32,System.String,Gnostice.Documents.PDF.PDFSearchMode,Gnostice.Documents.PDF.PDFSearchOptions,System.String,Gnostice.Documents.PDF.PDFFont,System.Drawing.SolidBrush,System.Boolean)">
            <summary>
            Removes occurrences of specified text on specified page and
            renders specified replacement text in its place.
            </summary>
            <param name="pageNum">Number of the page where the
                                  text needs to be redacted.</param>
            <param name="searchString">Text that needs to be searched
                                       for.</param>
            <param name="searchMode">Whether the search is for a
                                     literal string or a regular
                                     expression.</param>
            <param name="searchOptions">How search occurrences are
                                        found.</param>
            <param name="replaceString">Text with which the redacted
                                        text needs to be replaced.</param>
            <param name="font">Font with which the replacement
                               text needs to be rendered.</param>
            <param name="brush">_nt_</param>
            <param name="fontSizeAuto">Whether the font size of the
                                       replacement text needs to be
                                       adjusted to fit the region where
                                       the redacted text is found.</param>
        </member>
        <member name="T:Gnostice.Documents.PDF.PDFPageElementType">
            <summary>
            Represents a PDF page element.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PDF.PDFPageElementType.IMAGE">
            <summary>
            A text element.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PDF.PDFPageElementType.PATH">
            <summary>
            An image element.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PDF.PDFPageElementType.INLINE_IMAGE">
            <summary>
            A path (shape) element.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PDF.PDFPageElementType.ALL">
            <summary>
            A composite PDF page element.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.PDF.PDFSearchMode">
            <summary>
            Defines whether a search string is to be treated as literal
            text or regular expression.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PDF.PDFSearchMode.REGEX">
            <summary>
            Search text is a literal text string.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.PDF.PDFSearchOptions">
            <summary>
            Defines options for performing text search operations on a
            PDF.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PDF.PDFSearchOptions.CASE_SENSITIVE">
            <summary>
            Search is neither for case-sensitive nor for whole-word
            occurrences of the search string.
            </summary>
        </member>
        <member name="F:Gnostice.Documents.PDF.PDFSearchOptions.WHOLE_WORD">
            <summary>
            Search is for case-sensitive occurrences of the search
            string.
            </summary>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPDFDoc.GetAttachments">
            <summary>
            Gets list of file attachments in the documents.
            </summary>
            <returns>
            List containing the <see cref="!:Gnostice.PDFOne.PDFFileAttachment" text="attachments" />;
            null if no attachments are found.
            </returns>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPDFDoc.AttachDocument(Gnostice.Documents.PDF.PDFFileAttachment)">
            <summary>
            Adds specified file attachment to the document.
            </summary>
            <param name="fileAttachment">file that needs to be
                                   embedded in the document.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPDFDoc.AddAnnotLine(System.Single,System.Single,System.Single,System.Single,System.Single,System.Drawing.Color,System.String)">
            <summary>
            Adds a line annotation to the document.
            </summary>
            <param name="x1">X\-coordinate of the starting point
                             of the line annotation.</param>
            <param name="y1">Y\-coordinate of the starting point
                             of the line annotation.</param>
            <param name="x2">X\-coordinate of the end point of
                             the line annotation.</param>
            <param name="y2">Y\-coordinate of the end point of
                             the line annotation.</param>
            <param name="lineWidth">Width of the line.</param>
            <param name="lineColor">Color of the line.</param>
            <param name="content">Text that needs to be used as the
                                  content in the popup window of the
                                  annotation.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPDFDoc.AddAnnotInk(System.Drawing.PointF[],System.Drawing.Color,System.String)">
            <summary>
            Adds an ink annotation to the document.
            </summary>
            <param name="vertices">X\- and y\-coordinates of the
                                   vertices of the lines that need to
                                   form the "free\-hand scribble" of the
                                   ink annotation (x1, y1, x2, y2, x3,
                                   y3 ... xn, yn)</param>
            <param name="color">Color of the "free\-hand scribble"
                                and the borders of the annotation's
                                popup window.</param>
            <param name="content">Text that needs to be used as the
                                  content in the popup window of the
                                  annotation.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPDFDoc.AddAnnotJavaScript(System.String,System.Drawing.RectangleF)">
            <summary>
            Adds a JavaScript annotation to the document.
            </summary>
            <param name="javaScript">JavaScript script that needs to be
                                     executed by viewer applications
                                     when the annotation is clicked by
                                     an end\-user.</param>
            <param name="rectangle">Annotation rectangle on the page.</param>
            <remarks>
            The annotation appears as a hyperlink. The viewer application
            executes the JavaScript script when the hyperlink is clicked.
            
            </remarks>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPDFDoc.AddAnnotSquare(System.String,System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Adds a square or rectangular annotation to the specified
            location in the document.
            </summary>
            <param name="content">Text that needs to be used as
                                  the content in the popup
                                  window of the annotation.</param>
            <param name="rectangle">Annotation rectangle on the
                                    page.</param>
            <param name="backgroundColor">Color with which the square
                                          needs to be filled up.</param>
            <param name="borderColor">Line color of the square.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPDFDoc.AddAnnotCircle(System.String,System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Adds a circle annotation to the document.
            </summary>
            <param name="content">Text that needs to be used as
                                  the content in the popup
                                  window of the annotation.</param>
            <param name="rectangle">Annotation rectangle on the
                                    page.</param>
            <param name="backgroundColor">Background color of the
                                          circle.</param>
            <param name="borderColor">Border color of the circle.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPDFDoc.AddAnnotCaret(System.Drawing.RectangleF,System.String,System.Drawing.Color)">
            <summary>
            Adds a caret annotation to the document.
            </summary>
            <param name="rectangle">Annotation rectangle on the page.</param>
            <param name="content">Text that needs to be used as the
                                  content in the popup window of the
                                  annotation.</param>
            <param name="lineColor">Color of the caret.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPDFDoc.AddAnnotFileAttach(System.Single,System.Single,System.String,Gnostice.Documents.PDF.PDFFileAttachmentIcon)">
            <summary>
            Adds a file attachment annotation to the document.
            </summary>
            <param name="x">X\-coordinate of the annotation icon
                            on the page.</param>
            <param name="y">Y\-coordinate of the annotation icon
                            on the page.</param>
            <param name="fileName">Pathname of the file that needs to be
                                   attached to the document.</param>
            <param name="icon">Icon that needs to be used to display
                               the annotation on the page.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPDFDoc.AddAnnotPolygon(System.Drawing.PointF[],System.Drawing.Color,System.String,System.Drawing.Color,System.Single)">
            <summary>
            Adds a polygon annotation to the specified location in the
            document.
            </summary>
            <param name="vertices">X\- and y\-coordinates of the
                                   vertices of the polygon.</param>
            <param name="borderColor">Line color of the polygon.</param>
            <param name="contents">Text that needs to be used as the
                                   content in the popup window of the
                                   annotation.</param>
            <param name="fillColor">Color with which the polygon needs
                                    to be filled with.</param>
            <param name="borderWidth">Line width of the polygon.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPDFDoc.AddAnnotPolyline(System.Drawing.PointF[],System.Drawing.Color,System.String,System.Drawing.Color,Gnostice.Documents.PDF.PDFLineEndsStyle,Gnostice.Documents.PDF.PDFLineEndsStyle)">
            <summary>
            Adds a polyline annotation to the specified location in the
            document.
            </summary>
            <param name="vertices">X\- and y\-coordinates of the
                                   vertices of the polygon.</param>
            <param name="lineColor">Line color of the polygon.</param>
            <param name="Contents">Text that needs to be used as
                                   the content in the popup window
                                   of the annotation.</param>
            <param name="interiorColor">Color with which the ends of the
                                        polyline needs to be filled
                                        with.</param>
            <param name="startStyle">Style of line beginnings.</param>
            <param name="endStyle">Style of line ends.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPDFPage.AddAnnotText(System.Single,System.Single,Gnostice.Documents.PDF.PDFTextAnnotIcon,System.Drawing.Color,System.String)">
            <summary>
            Adds a text annotation.
            </summary>
            <param name="x">X\-coordinate of the top\-left corner
                            of the annotation icon.</param>
            <param name="y">Y\-coordinate of the top\-left corner
                            of the annotation icon.</param>
            <param name="icon">Annotation icon.</param>
            <param name="color">Color of the icon and the popup
                                window.</param>
            <param name="content">Text displayed in the popup window.</param>
            <remarks>
            A text annotation is identified by its icon, which is
            displayed in its annotation rectangle.
            </remarks>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPDFPage.AddAnnotInk(System.Drawing.PointF[],System.Drawing.Color,System.String)">
            <summary>
            Adds an ink annotation to the page.
            </summary>
            <param name="vertices">Vertices of the lines that need to
                                   form the "free\-hand scribble"
                                   of the ink annotation.</param>
            <param name="color">Color of the annotation.</param>
            <param name="content">Text displayed by viewer applications
                                  as the "content" of the
                                  annotation.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPDFPage.AddAnnotLine(System.Single,System.Single,System.Single,System.Single,System.Single,System.Drawing.Color,System.String)">
            <summary>
            Adds a line annotation to the document.
            </summary>
            <param name="x1">X\-coordinate of the beginning of
                             the line on the page.</param>
            <param name="y1">Y\-coordinate of the beginning of
                             the line on the page.</param>
            <param name="x2">X\-coordinate of the end of the line
                             on the page.</param>
            <param name="y2">Y\-coordinate of the end of the line
                             on the page.</param>
            <param name="lineWidth">Width of the line.</param>
            <param name="lineColor">Color of the line.</param>
            <param name="content">Text displayed by viewer application
                                  as the "content" of the
                                  annotation.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPDFPage.AddAnnotJavaScript(System.String,System.Drawing.RectangleF)">
            <summary>
            Adds a link annotation to the document. When the end-user
            selects the annotation, viewer applications will execute the
            specified JavaScript script.
            </summary>
            <param name="javaScript">JavaScript script that needs to be
                                     executed by viewer applications.</param>
            <param name="rectangle">Bounding box of the annotation on
                                    the page.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPDFPage.AddAnnotSquare(System.String,System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Adds a square or rectangular annotation to the specified
            location in the document. 
            </summary>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPDFPage.AddAnnotCircle(System.String,System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Adds a circle annotation to the document.
            </summary>
            <param name="content">Text displayed by viewer
                                  applications as the "content"
                                  of the annotation.</param>
            <param name="rectangle">Bounding box of the annotation
                                    on the page.</param>
            <param name="backgroundColor">Background color of the
                                          annotation.</param>
            <param name="borderColor">Border color of the
                                      annotation.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPDFPage.AddAnnotCaret(System.Drawing.RectangleF,System.String,System.Drawing.Color)">
            <summary>
            Adds a caret annotation to the page.
            </summary>
            <param name="rectangle">Bounding box of the annotation on
                                    the page.</param>
            <param name="content">Text displayed by viewer
                                  applications as the "content"
                                  of the annotation.</param>
            <param name="lineColor">Color of the caret.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPDFPage.AddAnnotFileAttach(System.Single,System.Single,System.String,Gnostice.Documents.PDF.PDFFileAttachmentIcon)">
            <summary>
            Adds a file attachment annotation to the page.
            </summary>
            <param name="x">X\-coordinate of the annotation on
                            the page.</param>
            <param name="y">Y\-coordinate of the annotation on
                            the page.</param>
            <param name="fileName">Pathname of the file that needs to be
                                   added as the file attachment.</param>
            <param name="icon">Icon used to display the file
                               attachment.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPDFPage.AddAnnotPolygon(System.Drawing.PointF[],System.Drawing.Color,System.String,System.Drawing.Color,System.Single)">
            <summary>
            Adds a polygon annotation to the specified location in the
            document.
            </summary>
            <param name="vertices">Locations of the vertices of the
                                   polygon on the page.</param>
            <param name="borderColor">Color of the polygon edges.</param>
            <param name="contents">Text displayed by viewer
                                   applications as the "content"
                                   of the annotation.</param>
            <param name="fillColor">Color used to fill the polygon.</param>
            <param name="borderWidth">Width of the lines forming the
                                      polygon.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPDFPage.AddAnnotPolyline(System.Drawing.PointF[],System.Drawing.Color,System.String,System.Drawing.Color,Gnostice.Documents.PDF.PDFLineEndsStyle,Gnostice.Documents.PDF.PDFLineEndsStyle)">
            <summary>
            Adds a polyline annotation to the specified location in the
            document.
            </summary>
            <param name="vertices">Locations of the vertices of the
                                   lines forming the polyline.</param>
            <param name="lineColor">Color of the polyline.</param>
            <param name="contents">Text displayed by viewer
                                   applications as the "content"
                                   of the annotation.</param>
            <param name="interiorColor">Color used to fill the ends of
                                        the polyline.</param>
            <param name="startStyle">Line\-ending style at the
                                     beginning of the lines.</param>
            <param name="endStyle">Line\-ending styles at the end
                                   of the lines.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPDFPage.AddFormField(Gnostice.Documents.PDF.PDFFormField)">
            <summary>
            Adds the form field to the document. 
            </summary>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPDFPage.RedactText(System.String,Gnostice.Documents.PDF.PDFSearchMode,Gnostice.Documents.PDF.PDFSearchOptions)">
            <summary>
            Redacts specified string in the page.
            </summary>
            <param name="searchString">String that needs to be
                                       redacted.</param>
            <param name="searchMode">Whether search is literal or for
                                     a regular expression.</param>
            <param name="searchOptions">Search options.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.ExPDFPage.RedactText(System.String,Gnostice.Documents.PDF.PDFSearchMode,Gnostice.Documents.PDF.PDFSearchOptions,System.String,Gnostice.Documents.PDF.PDFFont,System.Drawing.SolidBrush,System.Boolean)">
            <summary>
            Redacts specified text in the page and then replaces the
            instances redact instance with an alternative text.
            </summary>
            <param name="searchString">Text that needs to be redacted.</param>
            <param name="searchMode">Whether search is literal or for
                                     a regular expression.</param>
            <param name="searchOptions">Search options.</param>
            <param name="replaceText">Text with which the original
                                      text needs to be replaced.</param>
            <param name="font">Font with which the replacement
                               text needs to be rendered.</param>
            <param name="brush">Brush used to fill the bounding
                                box of the redacted text.</param>
            <param name="autoSizeText">Whether replacement text needs
                                       to be down\-sized to fit the
                                       bounding box of the original
                                       text.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFAppearanceStream.Clone">
            <summary>
            Creates a clone of this appearance stream.
            </summary>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFAppearanceStream.#ctor(System.Drawing.RectangleF,Gnostice.Documents.PDF.PDFMeasurementUnit)">
            <summary>
            Creates a new appearance stream with specified rectangle and
            measurement unit.
            </summary>
            <param name="rect">Region on a page where this appearance
                               stream would appear.</param>
            <param name="unit">Default measurement unit for the
                               appearance stream.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFAppearanceStream.#ctor(System.Drawing.RectangleF)">
            <summary>
            Creates a new appearance stream with specified rectangle.
            </summary>
            <param name="rect">Region on a page where this appearance
                               stream would appear.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFAppearanceStream.DrawLine(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Pen)">
            <summary>
            Draws a line between specified locations inside the
            appearance stream.
            </summary>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFAppearanceStream.DrawEllipse(System.Drawing.RectangleF,System.Drawing.Pen,System.Drawing.SolidBrush)">
            <summary>
            Draws an ellipse.
            </summary>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFAppearanceStream.DrawCircle(System.Single,System.Single,System.Single,System.Drawing.Pen,System.Drawing.SolidBrush)">
            <summary>
            Draw a circle.
            </summary>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFAppearanceStream.DrawPolyline(System.Single[],System.Single[],System.Drawing.Pen)">
            <summary>
            Draws a polyline between specified locations inside the
            appearance stream with specified pen. 
            </summary>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFAppearanceStream.DrawPolygon(System.Single[],System.Single[],System.Drawing.Pen,System.Drawing.SolidBrush)">
            <summary>
            Draws a closed polygon between specified locations inside the
            appearance stream with specified pen and brush.
            </summary>
            <param name="xPoints">X\-coordinates of the points.</param>
            <param name="yPoints">Y\-coordinates of the points.</param>
            <param name="pen">Pen used to stroke the polygon.</param>
            <param name="brush">Brush used to fill the polygon.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFAppearanceStream.DrawImage(System.String,System.Drawing.RectangleF)">
            <summary>
            Draws an image contained in a specified file within a
            specified rectangle inside the appearance stream.
            </summary>
            <param name="imgPath">Pathname of the image file.</param>
            <param name="rect">Rectangle where the image needs to be
                               drawn.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFAppearanceStream.DrawImage(System.String)">
            <summary>
            Draws an image at specified path.
            </summary>
            <param name="imgPath">Pathname of the image file.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFAppearanceStream.WriteText(System.String,Gnostice.Documents.PDF.PDFFont,System.Drawing.RectangleF,System.Drawing.SolidBrush,Gnostice.Documents.PDF.PDFTextFormatter)">
            <summary>
            Writes specified text with specified font, formatting and
            brush inside specified bounding box.
            </summary>
            <param name="text">Text that needs to be rendered.</param>
            <param name="font">Font with which the text needs to be
                               rendered.</param>
            <param name="rect">Bounding box of the text.</param>
            <param name="brush">How the text needs to be filled.</param>
            <param name="tf">Formatting settings of the text.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFAppearanceStream.WriteText(System.String,Gnostice.Documents.PDF.PDFFont,System.Drawing.RectangleF,Gnostice.Documents.PDF.PDFTextFormatter,System.Drawing.SolidBrush,Gnostice.Documents.PDF.PDFMeasurementUnit)">
            <summary>
            Writes specified text with specified font, formatting and
            brush inside specified bounding box. The position and
            dimensions of the bounding box will be interpreted in the
            specified measurement unit.
            </summary>
            <param name="text">Text that needs to be rendered.</param>
            <param name="font">Font with which the text needs to be
                               rendered.</param>
            <param name="rect">Bounding box of the text.</param>
            <param name="tf">Formatting settings of the text.</param>
            <param name="brush">How the text needs to be filled.</param>
            <param name="unit">Measurement unit to interpret the
                               position and dimensions of the bounding
                               box.</param>
        </member>
        <member name="T:Gnostice.Documents.PDF.PDFFormCheckBox">
            <summary>
            This class represents a check box form field.
            </summary>
            <example>
                <code lang="c#">
            PDFDocument doc1 = new PDFDocument();
            doc1.MeasurementUnit = PDFMeasurementUnit.Points;
            
            PDFFormCheckBox cb1 = new PDFFormCheckBox("pwd_stickiness", new RectangleF(100, 100, 15, 10));
            cb1.Checked = true;
            cb1.Symbol = PDFCheckBoxSymbol.Check;
            cb1.BackgroundColor = Color.White;
            cb1.BorderWidth = 1;
            
            doc1.AddFormField(cb1);
            doc1.WriteText("Remember password?", 120, 100);
            
            doc1.OpenAfterCreate = true;
            doc1.Save("create_checkbox.pdf");
            doc1.Close();
            </code>
            </example>
            <remarks>
            Use <see cref="!:Gnostice.PDFOne.ExPDFDoc.AddFormField@PDFFormField" text="PDFDocument.AddFormField" />
            or <see cref="!:Gnostice.PDFOne.ExPDFPage.AddFormField@PDFFormField" text="PDFPage.AddFormField" />
            methods to add check box form fields to a document or page.
            </remarks>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormCheckBox.ExportName">
            <summary>
            Gets or sets name of the check box form field when the form
            is submitted.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormCheckBox.BackgroundColor">
            <summary>
            Gets or sets background color of the check box.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormCheckBox.BorderColor">
            <summary>
            Gets or sets border color of the check box.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormCheckBox.BorderWidth">
            <summary>
            Gets or sets border width of the check box.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormCheckBox.FieldName">
            <summary>
            Gets or sets name of the check box form field in the form.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormCheckBox.DefaultValue">
            <summary>
            Gets or sets "checked" state of the check box when
            the form field is reset.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormCheckBox.ToolTip">
            <summary>
            Gets or sets tool tip text for the check box.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormCheckBox.Checked">
            <summary>
            Gets or sets whether the check box is checked by default.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormCheckBox.FieldValue">
            <summary>
            Gets or sets default value of the check box.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormCheckBox.Symbol">
            <summary>
            Gets or sets symbol used to display the "checked"
            state of the check box.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormCheckBox.CustomSymbol">
            <summary>
            Gets or sets custom character used to display the "checked"
            state of the check box.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormCheckBox.ReadOnly">
            <summary>
            Gets or sets whether the check box form field is read-only.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormCheckBox.Required">
            <summary>
            Gets or sets whether a value needs to be set for this check
            box form field for the form to be submitted.
            </summary>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFFormCheckBox.#ctor(System.String,System.Drawing.RectangleF)">
            <summary>
            Creates a new check box form field instance with specified
            name and bounding box.
            </summary>
            <param name="fieldName">Name of the check form field.</param>
            <param name="rectangle">Bounding box of the form field.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFFormCheckBox.#ctor">
            <summary>
            Creates a new check box form field instance. 
            </summary>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFFormCheckBox.AddAction(Gnostice.Documents.PDF.PDFFormFieldAction,System.String)">
            <summary>
            Adds specified JavaScript PDF action to specified viewer
            application event of the form field.
            </summary>
            <param name="action">Viewer application event of the
                                 form field.</param>
            <param name="javaScript">JavaScript script that needs to be
                                     executed by viewer applications.</param>
        </member>
        <member name="T:Gnostice.Documents.PDF.PDFFormComboBox">
            <summary>
            This class represents a combo box form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormComboBox.BackgroundColor">
            <summary>
            Gets or sets background color of the form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormComboBox.BorderColor">
            <summary>
            Gets or sets border color of the form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormComboBox.BorderWidth">
            <summary>
            Gets or sets border width of the form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormComboBox.DefaultValue">
            <summary>
            Gets or sets default value of the form field when the form is
            reset.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormComboBox.FieldName">
            <summary>
            \ \ 
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormComboBox.FieldValue">
            <summary>
            Gets or sets value of the form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormComboBox.ToolTip">
            <summary>
            Gets or sets the tooltip text of the form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormComboBox.Editable">
            <summary>
            Gets or sets whether the end-user can add new options to the
            list in a viewer application.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormComboBox.SortList">
            <summary>
            Gets or sets whether the list needs to be sorted by viewer
            applications before it is displayed to the end-user.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormComboBox.SelectedItemIndex">
            <summary>
            Gets or sets index of the selected option in the list box.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormComboBox.OptionList">
            <summary>
            Gets or sets options in the form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormComboBox.ReadOnly">
            <summary>
            Gets or sets whether the form field is read-only, that is,
            the end-user should not be allowed to change the selected
            option in the list box.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormComboBox.Required">
            <summary>
            Whether the form field needs to have a value for the form to
            be submitted.
            </summary>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFFormComboBox.AddItem(System.String)">
            <summary>
            Adds specified option to the list box.
            </summary>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFFormComboBox.#ctor">
            <summary>
            Creates a new combo box form field instance.
            </summary>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFFormComboBox.#ctor(System.Drawing.RectangleF)">
            <summary>
            Creates a combo box form field instance with specified
            bounding box.
            </summary>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFFormComboBox.AddItem(System.String,System.String)">
            <summary>
            Adds specified option (with specified export value) to the
            list box.
            </summary>
            <remarks>
            If the option is selected, the value of exportValue will be
            submitted instead of the value of str.
            </remarks>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFFormComboBox.AddAction(Gnostice.Documents.PDF.PDFFormFieldAction,System.String)">
            <summary>
            Adds specified JavaScript PDF action for specified viewer
            application event.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.PDF.PDFFormField">
            <summary>
            This is a base class from which all form field classes are
            derived.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormField.Orientation">
            <summary>
            Gets or sets angle of rotation of the form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormField.FieldType">
            <summary>
            Gets type of the form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormField.FieldName">
            <summary>
            Gets or sets name of the form field in the document.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormField.ToolTip">
            <summary>
            Gets or sets tooltip text of the form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormField.FieldValue">
            <summary>
            Gets or sets value of the form field.
            </summary>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFFormField.#ctor">
            <summary>
            Creates a new form field of unknown type.
            </summary>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFFormField.GetFullName">
            <summary>
            Get full name representing the parent-child ancestry of the
            form field.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.PDF.PDFFormListBox">
            <summary>
            This represents a list box form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormListBox.BackgroundColor">
            <summary>
            Gets or sets background color of the form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormListBox.BorderColor">
            <summary>
            Gets or sets border color of the form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormListBox.BorderWidth">
            <summary>
            Gets or sets border width of the form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormListBox.FontColor">
            <summary>
            Gets or sets color of the options with which the options in
            the combo box are displayed.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormListBox.DefaultSelectedIndex">
            <summary>
            Gets or sets index of the option that the viewer application
            sets as selected when the form is reset.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormListBox.FieldName">
            <summary>
            Gets or sets name of the form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormListBox.Font">
            <summary>
            Gets or sets font with which options in the combo box are
            displayed.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormListBox.ToolTip">
            <summary>
            Gets or sets tooltip text for the form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormListBox.MultiSelect">
            <summary>
            Gets or sets whether multiple options can be selected in the
            combo box.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormListBox.SortList">
            <summary>
            Gets or sets whether options in the combo box needs to be
            sorted by viewer applications before it is displayed to the
            end-user.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormListBox.SelectedItemIndex">
            <summary>
            Gets or sets index of the selected option of the combo box
            form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormListBox.OptionList">
            <summary>
            Gets or sets options of the combo box form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormListBox.ReadOnly">
            <summary>
            Gets or sets whether the end-user should not be allowed to
            change the selected option of the form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormListBox.Required">
            <summary>
            Gets or sets whether a value is required for the form field
            before the form to be submitted.
            </summary>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFFormListBox.#ctor">
            <summary>
            Creates a new list box form field instance. 
            </summary>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFFormListBox.#ctor(System.Drawing.RectangleF)">
            <summary>
            Creates a new list box form field instance with specified
            bounding box.
            </summary>
            <param name="rect">Bounding box of the form field in its
                               page.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFFormListBox.AddAction(Gnostice.Documents.PDF.PDFFormFieldAction,System.String)">
            <summary>
            Adds specified Javascript PDF action for specified viewer
            application event of the form field.
            </summary>
            <param name="action">Viewer application event of the
                                 form field.</param>
            <param name="javaScript">JavaScript script that needs to be
                                     executed by viewer applications.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFFormListBox.AddItem(System.String)">
            <summary>
            Adds specified option to the list box form field.
            </summary>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFFormListBox.AddItem(System.String,System.String)">
            <summary>
            Adds specified option (with specified export value) to the
            list box form field.
            </summary>
            <param name="str">Text representing the option that
                              needs to be added.</param>
            <param name="exportValue">Text representing the actual value
                                      that is submitted by viewer
                                      applications when the form is
                                      submitted.</param>
        </member>
        <member name="T:Gnostice.Documents.PDF.PDFFormPushButton">
            <summary>
            This class represents a push button form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormPushButton.BackgroundColor">
            <summary>
            Gets or sets background color of the push button.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormPushButton.BorderColor">
            <summary>
            Gets or sets border color of the push button.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormPushButton.BorderWidth">
            <summary>
            Gets or sets border width of the push button.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormPushButton.FontColor">
            <summary>
            Gets or sets color of the caption of the push button form
            field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormPushButton.Font">
            <summary>
            Gets or sets font with which the caption on the push button
            needs to be displayed.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormPushButton.ToolTip">
            <summary>
            Gets or sets tooltip text for the push button form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormPushButton.DownCaption">
            <summary>
            Gets or sets caption that viewer applications should display
            on the push button when the end-user brings presses down on
            the form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormPushButton.FdfFilePath">
            <summary>
            Gets or sets pathname of the FDF file from which viewer
            applications should read values to populate the form fields.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormPushButton.ActionType">
            <summary>
            Gets or sets the type of PDF action that viewer applications
            need to execute when the push button is selected by the
            end-user.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormPushButton.JavaScript">
            <summary>
            Gets or sets JavaScript script that needs to be executed when
            the form field is selected by the end-user.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormPushButton.NormalCaption">
            <summary>
            Gets or sets default caption with which the push button is
            displayed.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormPushButton.RolloverCaption">
            <summary>
            Gets or sets caption that viewer applications should display
            on the push button when the end-user brings the mouse pointer
            over the form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormPushButton.ReadOnly">
            <summary>
            Gets or sets whether the end-users are not allowed to
            interact with the push button form field.
            </summary>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFFormPushButton.#ctor">
            <summary>
            Creates a new push button form field instance.
            </summary>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFFormPushButton.#ctor(System.Drawing.RectangleF)">
            <summary>
            Creates a new push button form field instance with specified
            region.
            </summary>
            <param name="rect">Region on a page occupied by the form
                               field.</param>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFFormPushButton.AddAction(Gnostice.Documents.PDF.PDFFormFieldAction,System.String)">
            <summary>
            Gets or sets a JavaScript PDF action for specified viewer
            application event for the form field.
            </summary>
            <param name="action">Viewer application event of the
                                 form field.</param>
            <param name="javaScript">JavaScript script that needs to be
                                     executed by viewer applications.</param>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormRadioButton.SelectedItemIndex">
            <summary>
            Gets or sets the index of the radio button item in this radio
            button form field that is selected.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormRadioButton.ReadOnly">
            <summary>
            Gets or sets whether the end-user should not be allowed to
            change the checked state of this radio button.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormRadioButton.Required">
            <summary>
            Gets or sets whether a value for this form field is required
            for the form to be submitted.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.PDF.PDFFormRadioItem">
            <summary>
            This class represents a radio button option form field.
            </summary>
            <value>
            A radio button option is usually part of a radio button form
            field. On a viewer application, end-users are usually allowed
            to select only one radio button option on a radio button form
            field. 
            </value>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormRadioItem.Symbol">
            <summary>
            Gets or sets symbol used to display the "checked"
            state of the radio button item form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormRadioItem.CustomSymbol">
            <summary>
            Gets or sets custom character used to display the "checked"
            state of the radio button item form field.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.PDF.PDFFormTextField">
            <summary>
            This class represents a text box form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormTextField.BackgroundColor">
            <summary>
            Gets or sets background color of the text box form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormTextField.BorderColor">
            <summary>
            Gets or sets border color of the text box form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormTextField.BorderWidth">
            <summary>
            Gets or sets border width of the text box form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormTextField.FontColor">
            <summary>
            Gets or sets color used to display the value of the form
            field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormTextField.DefaultValue">
            <summary>
            Gets or sets value of the form field when the form is reset.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormTextField.FieldName">
            <summary>
            Gets or sets name of the form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormTextField.Font">
            <summary>
            Gets or sets font used to display the value of the form
            field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormTextField.ToolTip">
            <summary>
            Gets or sets the highlight box text that viewer applications
            should display for the form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormTextField.Alignment">
            <summary>
            Gets or sets how text is aligned in the text box form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormTextField.DoNotSpellCheck">
            <summary>
            Gets or sets whether viewer applications should not enable
            spell-check feature for the text box form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormTextField.DoNotScroll">
            <summary>
            Gets or sets whether viewer applications should display the
            value in a single line.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormTextField.ReadOnly">
            <summary>
            Gets or sets whether the end-user should not be allowed to
            modify the value of the form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormTextField.Required">
            <summary>
            Gets or sets whether a value is required for the form field
            to enable the form to be submitted.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormTextField.Multiline">
            <summary>
            Gets or sets whether the form field displays its value in
            multiple lines to accommodates its length.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormTextField.Password">
            <summary>
            Gets or sets whether viewer applications should mask the the
            value of this form field like a password field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormTextField.IsComb">
            <summary>
            Gets whether the form field is divided into a number of
            boxes, each of which will accept only one character entered
            by the user.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormTextField.FontSizeAuto">
            <summary>
            Gets or sets whether viewer applications should autosize the
            the value of the form field to fit within its bounding box. 
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFFormTextField.MaxLength">
            <summary>
            Gets or sets maximum length of the value that can be entered
            in the form field.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFProAnnot.Popup">
            <summary>
            Gets or sets annotation popup.
            </summary>
        </member>
        <member name="M:Gnostice.Documents.PDF.PDFProAnnot.SetPopup(Gnostice.Documents.PDF.PDFPopupAnnot,System.Boolean)">
            <summary>
            Sets specified popup annotation as this annotation's popup
            window.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFProAnnot.DownAppearance">
            <summary>
            Gets or sets appearance stream used by viewer applications
            when the end-user holds down the cursor on the annotation. 
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFProAnnot.NormalAppearance">
            <summary>
            Gets or sets appearance stream used by viewer applications
            when the end-user is not interacting with the annotation. 
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFProAnnot.RolloverAppearance">
            <summary>
            Gets or sets appearance stream used by viewer applications
            when the end-user hovers the cursor over the annotation. 
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFTextAnnot.X">
            <summary>
            Gets or sets x-coordinate at which the text annotation symbol
            will be drawn.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFTextAnnot.Y">
            <summary>
            Gets or sets y-coordinate at which the text annotation symbol
            will be drawn. 
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFTextAnnot.IsOpen">
            <summary>
            Gets or sets the setting which determines whether the text
            annotation's pop-up note is visible by default.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFTextAnnot.Color">
            <summary>
            Gets or sets the color of the icon (symbol) which signifies
            the text annotation.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFTextAnnot.Title">
            <summary>
            Gets or sets the title of the text annotation. 
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFTextAnnot.Subject">
            <summary>
            Gets or sets the text which is the subject of the text
            annotation. 
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFTextAnnot.Name">
            <summary>
            Gets or sets the internal name of the text annotation.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFTextAnnot.AnnotIcon">
            <summary>
            Gets or sets the icon (symbol) which will signify the text
            annotation. 
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PDF.PDFTextAnnot.Opacity">
            <summary>
            Gets or sets opacity of the annotation.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.PrinterPreferences">
            <summary>
            This class represents printing preferences.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PrinterPreferences.PasswordSettings">
            <summary>
            Gets or sets password-prompt settings.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.PrinterPreferences.FormatterSettings">
            <summary>
            Gets or sets FormatterSettings
            viewer.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.ResStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.Word.DOCXEncoderSettings">
            <summary>
            This class specifies DOCX format settings for converting
            documents.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.Word.DOM.WordImage.ParsedPositionX">
            <summary>
            This property provides the 'X' position of the drawing as read from the document.
            The position is without applying the offset properties of the drawing.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.Word.DOM.WordImage.ParsedPositionY">
            <summary>
            This property provides the 'Y' position of the drawing as read from the document.
            The position is without applying the offset properties of the drawing.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.Word.HTMLEncoderSettings">
            <summary>
            This class specifies HTML format settings for converting
            documents.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.Word.TextEncoderSettings">
            <summary>
            This class specifies text format settings for converting
            documents.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.Word.TextEncoderSettings.FileEncoding">
            <summary>
            Gets or sets text file encoding scheme.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.Word.TextEncoderSettings.UseByteOrderMark">
            <summary>
            Gets or sets whether BOM should be used.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.Word.TextEncoderSettings.TextFormatter">
            <summary>
            Gets or sets text-formatting settings.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.Word.WordCompatibilitySettings">
            <summary>
            Contains the properties which control the Word format documents rendering behavior
            </summary>
        </member>
        <member name="P:Gnostice.Documents.Word.WordCompatibilitySettings.RenderHiddenText">
            <summary>
            Setting which specifies whether hidden text is rendered.
            This setting is false by default.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.Word.WordCompatibilitySettings.DoWordPerfectJustification">
            <summary>
            Setting which specifies how the text in a paragraph should be justified. 
            If set to true then the paragraph is justified as per the behavior of WordPefect 6.x for Windows, which attempts to 
            reduce the spacing between words to fit more text on a line.
            This setting is false by default.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.Word.WordDocumentInfo.Category">
            <summary>
            Gets or sets "Category" document information
            property. 
            </summary>
        </member>
        <member name="P:Gnostice.Documents.Word.WordDocumentInfo.ContentStatus">
            <summary>
            Gets or sets "Content status" document information
            property. 
            </summary>
        </member>
        <member name="P:Gnostice.Documents.Word.WordDocumentInfo.Created">
            <summary>
            Gets " the date of creation of the document
            property. 
            </summary>
        </member>
        <member name="P:Gnostice.Documents.Word.WordDocumentInfo.Identifier">
            <summary>
            Gets or sets "Identifier" document information
            property. 
            </summary>
        </member>
        <member name="P:Gnostice.Documents.Word.WordDocumentInfo.Language">
            <summary>
            Gets or sets "Language" document information
            property. 
            </summary>
        </member>
        <member name="P:Gnostice.Documents.Word.WordDocumentInfo.LastModifiedBy">
            <summary>
            Gets " the user who performed the last modification.
            property. 
            </summary>
        </member>
        <member name="P:Gnostice.Documents.Word.WordDocumentInfo.LastPrinted">
            <summary>
            Gets " the date and time of the last printing
            property. 
            </summary>
        </member>
        <member name="P:Gnostice.Documents.Word.WordDocumentInfo.Modified">
            <summary>
            Gets " the date on which the resource was changed
            property. 
            </summary>
        </member>
        <member name="P:Gnostice.Documents.Word.WordDocumentInfo.Revision">
            <summary>
            Gets or sets "Revision" document information
            property. 
            </summary>
        </member>
        <member name="P:Gnostice.Documents.Word.WordDocumentInfo.Version">
            <summary>
            Gets or sets "Version" document information
            property. 
            </summary>
        </member>
        <member name="P:Gnostice.Documents.Word.WordPage.PageParagraphs">
            <summary>
            Returns unprocessed/raw items.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.SpreadSheetPreferences">
            <summary>
            This class specifies Spread Sheet settings
            </summary>
        </member>
        <member name="M:Gnostice.Documents.Spreadsheet.XLSX.LoadDocument(System.String,System.String)">
            <summary>
            Loading the document and getting the stream of the document.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="P:Gnostice.Documents.TextFormatterSettings.BreakLines">
            <summary>
            Gets or sets whether to include empty lines for line breaks.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.TXTFormatterSettings">
            <summary>
            This class specifies how text content is displayed.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.TXTFormatterSettings.Font">
            <summary>
            Gets or sets font used to display text.
            </summary>
        </member>
        <member name="P:Gnostice.Documents.TXTFormatterSettings.PageSettings">
            <summary>
            Gets or sets page settings.
            </summary>
        </member>
        <member name="M:Gnostice.Documents.TXTFormatterSettings.SetMeasurementUnit(Gnostice.Core.Graphics.MeasurementUnit)">
            <summary>
            Gets or sets measurement units in which page settings are
            specified.
            </summary>
        </member>
        <member name="T:Gnostice.Documents.TXTPreferences">
            <summary>
            This class specifies page settings
            </summary>
        </member>
        <member name="M:Gnostice.Documents.Utils.PredictFormat(System.IO.Stream)">
            <summary>
            Attempts to predict the format of the document given it's stream of data.
            </summary>
            <param name="stream">Stream of document data.</param>
            <returns>File extension with dot prefix, if the format could be determined, else an empty string.</returns>
        </member>
        <member name="M:Gnostice.Documents.Utils.GetDocumentEngine(System.String,System.IO.Stream)">
            <summary>
            Attempts to determine the document engine that can handle the document given either the filename with path of the document or the stream of document data.
            Note that parameter fileNameWithPath takes precedence over stream.
            </summary>
            <param name="fileNameWithPath">File name with full path or null if stream is being passed.</param>
            <param name="stream">Stream of data.</param>
            <returns>Document engine, if one could be determined, else null.</returns>
        </member>
        <member name="P:Gnostice.Documents.XPSEncoderSettings.FileFormat">
            <summary>
            Gets File format
            </summary>
        </member>
        <member name="P:Gnostice.Documents.XPSEncoderSettings.MimeType">
            <summary>
            Gets Mime type
            </summary>
        </member>
        <member name="T:Gnostice.Utils.FontEngine.PathCommandType">
            <summary>
            This enum contains values that specifies the drawing command type for the path data contained in PathData class.
            </summary>
            <seealso cref="T:Gnostice.Utils.FontEngine.PathData" />
        </member>
        <member name="F:Gnostice.Utils.FontEngine.PathCommandType.Line">
            <summary>
            Specifies that the current path command type is Line. It requires 4 operands to be read from the property 'Operands' of PathData class.
            </summary>
        </member>
        <member name="F:Gnostice.Utils.FontEngine.PathCommandType.Bezier">
            <summary>
            Specifies that the current path command type is Bezier curve. It requires 8 operands to be read from the property 'Operands' of PathData class.
            </summary>
        </member>
        <member name="F:Gnostice.Utils.FontEngine.PathCommandType.StartCompositePath">
            <summary>
            Specifies that a composite path is going to start which in turn can have subpaths and composite paths. Hint: It is possible that a composite path can have inner composite paths to any levels. Hence, whenever  StartCompositePath command is encountered, create a Path for the composite path and push to the Stack and then always peek from the stack to get the current composite path and perform the operations on it.
            </summary>
        </member>
        <member name="F:Gnostice.Utils.FontEngine.PathCommandType.CloseCompositePath">
            <summary>
            Specifies that the current composite path should be closed. Hint: Pop the composite path from the stack, close the path and assign to sub path so that popped composite path will be available in the sub path for further operations that should be performed before adding it to its parent composite path.
            </summary>
        </member>
        <member name="F:Gnostice.Utils.FontEngine.PathCommandType.StartSubPath">
            <summary>
            Specifies that new figure is going to start in this sub path.
            </summary>
        </member>
        <member name="F:Gnostice.Utils.FontEngine.PathCommandType.CloseSubPath">
            <summary>
            Specifies that the current sub path should be closed.
            </summary>
        </member>
        <member name="F:Gnostice.Utils.FontEngine.PathCommandType.TransformSubPath">
            <summary>
            TransformSubPath specifies that the recently closed sub path should be transformed using the transformation values defined by this operation. It requires 6 operands to be read from the property 'Operands' of PathData class.
            </summary>
        </member>
        <member name="F:Gnostice.Utils.FontEngine.PathCommandType.AddSubPathToCompositePath">
            <summary>
            Specifies that the current sub path should be appended/added to the current composite path.
            </summary>
        </member>
        <member name="P:Gnostice.Utils.FontEngine.PathData.IsComposite">
            <summary>
            Returns whether this PathData is composed of more than one path that makes the composite glyph.
            </summary>
        </member>
        <member name="T:Gnostice.Utils.FontEngine.Resources.ResExceptionStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="T:Gnostice.Utils.FontEngine.Resources.ResStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:Gnostice.Licensing.GnosticeLicenseProvider.#ctor">
            <summary>
            Create a new instance of the license provider
            </summary>
        </member>
        <member name="T:Infralution.Licensing.ASP.AuthenticatedLicenseStatus">
            <summary>
            The status of an <see cref="T:Infralution.Licensing.ASP.AuthenticatedLicense" /> once it has been validated by calling 
            <see cref="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.ValidateLicense(Infralution.Licensing.ASP.AuthenticatedLicense)" /></summary>
        </member>
        <member name="F:Infralution.Licensing.ASP.AuthenticatedLicenseStatus.Unvalidated">
            <summary>
            The license has not been validated yet
            </summary>
        </member>
        <member name="F:Infralution.Licensing.ASP.AuthenticatedLicenseStatus.Unauthenticated">
            <summary>
            The license has not been authenticated
            </summary>
        </member>
        <member name="F:Infralution.Licensing.ASP.AuthenticatedLicenseStatus.Valid">
            <summary>
            The license is valid
            </summary>
        </member>
        <member name="F:Infralution.Licensing.ASP.AuthenticatedLicenseStatus.Expired">
            <summary>
            The license has expired (past the ExpiryDate)
            </summary>
        </member>
        <member name="F:Infralution.Licensing.ASP.AuthenticatedLicenseStatus.InvalidComputer">
            <summary>
            The license is not valid for this computer
            </summary>
        </member>
        <member name="F:Infralution.Licensing.ASP.AuthenticatedLicenseStatus.TerminalServicesNotAllowed">
            <summary>
            The license is not valid for use within Terminal Services
            </summary>
        </member>
        <member name="F:Infralution.Licensing.ASP.AuthenticatedLicenseStatus.InvalidProduct">
            <summary>
            The license key is not for this product
            </summary>
        </member>
        <member name="F:Infralution.Licensing.ASP.AuthenticatedLicenseStatus.InvalidKey">
            <summary>
            The license key does not match the license key parameters
            </summary>
        </member>
        <member name="F:Infralution.Licensing.ASP.AuthenticatedLicenseStatus.InvalidSignature">
            <summary>
            The license contents do not match the signature, indicating possible tampering
            </summary>
        </member>
        <member name="F:Infralution.Licensing.ASP.AuthenticatedLicenseStatus.InvalidRelease">
            <summary>
            The license key is not for this release of the product
            </summary>
        </member>
        <member name="T:Infralution.Licensing.ASP.AuthenticatedLicense">
            <summary>
            Defines an authenticated license for an application or component generated using the Infralution
            Licensing System.
            </summary>
            <remarks></remarks>
            <seealso cref="T:Infralution.Licensing.ASP.AuthenticatedLicenseProvider" />
            <exclude />
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicense.#ctor">
            <summary>
            Create a new (empty) license
            </summary>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicense.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Create a new unauthenticated License
            </summary>
            <param name="productName">The name of the product the license is for (MUST match the license parameters)</param>
            <param name="encryptedLicenseKey">The encrypted license key</param>
            <param name="computerID">The ID of the computer (if any) that the license is locked to</param>
            <param name="applicationData">The application data to pass to the authentication server</param>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicense.ProductName">
            <summary>
            The name of the product this license is for
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicense.Status">
            <summary>
            The validation status of this license
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicense.EncryptedLicenseKey">
            <summary>
            The encrypted license key for the license
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicense.LicenseKey">
            <summary>
            Overridden to return <see cref="P:Infralution.Licensing.ASP.AuthenticatedLicense.EncryptedLicenseKey" /></summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicense.SerialNo">
            <summary>
            The unique serial no for the license
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicense.ProductInfo">
            <summary>
            The product data associated with the license
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicense.ComputerID">
            <summary>
            The ID of the computer that this license is for
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicense.AuthenticationData">
            <summary>
            Data returned by the authentication server when the license is authenticated
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicense.ApplicationData">
            <summary>
            Application data passed to the authentication server when the license is authenticated
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicense.FirstAuthenticationDate">
            <summary>
            The Date/Time (UTC) at which this license key was first authenticated
            </summary>
            <remarks>
            Licenses authenticated using previous versions of the ILS may not include this property
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicense.LastAuthenticationDate">
            <summary>
            The Date/Time (UTC) at which this license key was last authenticated
            </summary>
            <remarks>
            Licenses authenticated using previous versions of the ILS may not include this property
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicense.AuthenticationCount">
            <summary>
            A count which is incremented each time the license is authenticated or reauthenticated
            on a given computer
            </summary>
            <remarks>
            This is only included in the license if the CheckClonedComputers option is enabled.  It is
            used to verify that there is only a single client computer using the license key.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicense.NumFloatingLicenses">
            <summary>
            The number of floating licenses included in this license
            </summary>
            <remarks>
            This is only included in the license for floating licenses
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicense.IsFloatingLicense">
            <summary>
            Is this license a floating license
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicense.ExpiryDate">
            <summary>
            The Date/Time (UTC) at which this license expires (if any)
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicense.BlockTerminalServices">
            <summary>
            Should this license be blocked from use in a terminal services client
            </summary>
            <remarks>
            Licenses authenticated using previous versions of the ILS may not include this property
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicense.Signature">
            <summary>
            The Public Key Signature for the license
            </summary>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicense.VerifySignature(Infralution.Licensing.ASP.AuthenticatedLicenseParameters)">
            <summary>
            Verify that the signature of the license matches the contents
            </summary>
            <param name="parameters">The license parameters used to sign the license</param>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicense.Signed">
            <summary>
            Has the license been signed
            </summary>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicense.Sign(Infralution.Licensing.ASP.AuthenticatedLicenseParameters)">
            <summary>
            Sign the license with the given parameters
            </summary>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicense.Dispose">
            <summary>
            Cleans up any resources held by the license
            </summary>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicense.SetEncryptedLicense(Infralution.Licensing.ASP.EncryptedLicense)">
            <summary>
            Initialize the license with the given encrypted licence parameters 
            </summary>
            <param name="encryptedLicense">The encrypted license</param>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicense.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create the authenticated license from binary serialization
            </summary>
            <param name="info">The object to serialize from</param>
            <param name="context">The serialization context</param>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicense.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Get the binary serialized data for the license
            </summary>
            <param name="info">The object to serialize into</param>
            <param name="context">The serialization context</param>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicense.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implement the ISerializable interface
            </summary>
            <param name="info">The object to serialize into</param>
            <param name="context">The serialization context</param>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicense.Dispose(System.Boolean)">
            <summary>
            Handle disposing resources used by derived classes
            </summary>
            <param name="disposing">Is the object being disposed</param>
        </member>
        <member name="T:Infralution.Licensing.ASP.AuthenticatedLicenseParameters">
            <summary>
            The parameters used to generate and validate <see cref="T:Infralution.Licensing.ASP.AuthenticatedLicense">AuthenticatedLicenses</see>
            using an <see cref="T:Infralution.Licensing.ASP.AuthenticatedLicenseProvider" />.
            </summary>
            <seealso cref="T:Infralution.Licensing.ASP.AuthenticatedLicenseProvider" />
        </member>
        <member name="T:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.Version">
            <summary>
            Defines versions of the parameters for backward compatibility
            </summary>
        </member>
        <member name="F:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.Version.V4_0">
            <summary>
            First version with authentication
            </summary>
        </member>
        <member name="F:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.Version.V5_0">
            <summary>
            Added AuthenticationData
            </summary>
        </member>
        <member name="F:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.Version.V5_3">
            <summary>
            Added FirstAuthenticationDate
            </summary>
        </member>
        <member name="F:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.Version.V5_7">
            <summary>
            Added ApplicationData
            </summary>
        </member>
        <member name="F:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.Version.V5_8">
            <summary>
            Added ExpiryDate
            </summary>
        </member>
        <member name="F:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.Version.V5_10">
            <summary>
            Added DisableExpiredLicenses
            </summary>
        </member>
        <member name="F:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.Version.V6_0">
            <summary>
            Added LastAuthenticationDate, DetectClonedComputers, 
            BlockTerminalServices, NumFloatingLicenses
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.CompatibleVersion">
            <summary>
            The minimum version of ILS that application code for this product uses.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.AuthenticationPassword">
            <summary>
            The password used to encrypt a simple license key to produce an authenticated license key 
            </summary>
            <remarks>
            If this is null then authentication keys are the same as the underlying <see cref="T:Infralution.Licensing.ASP.EncryptedLicense" /> 
            keys.  This can be useful if you want to change from using an <see cref="T:Infralution.Licensing.ASP.EncryptedLicenseProvider" />
            but don't wish to issue new license keys.  Using a null value does sacrifice the extra level of security
            provided by the authentication password.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.AuthenticationServerURL">
            <summary>
            The URL of the Authentication Server
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.DisableExpiredLicenses">
            <summary>
            Should the license be disabled once the expiry date (if any) has been reached
            </summary>
            <remarks>
            The default value is true
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.MaxAuthentications">
            <summary>
            The maximum number of distinct authentications (on different computers) allowed for a given key
            </summary>
            <remarks>
            This property is for use by the Authentication Server only and is not exported to client code
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.MaxDeauthentications">
            <summary>
            The maximum number of authentications that the user can deactivate (by uninstalling the license)
            with a period given by the <see cref="P:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.MaxDeauthenticationsDays" /></summary>
            <remarks>
            This property is for use by the Authentication Server only and is not exported to client code
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.MaxDeauthenticationsDays">
            <summary>
            The number of days over which the deauthentications are counted 
            </summary>
            <remarks>
            This property is for use by the Authentication Server only and is not exported to client code.  
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.IncludeApplicationData">
            <summary>
            Should the Application Data be included in the license
            </summary>
            <remarks>
            This property is for use by the Authentication Server only and is not exported to client code
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.DetectClonedComputers">
            <summary>
            Should the Reauthenticate check for cloned computers
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.BlockTerminalServices">
            <summary>
            Should the license be blocked from running in a terminal services environment
            </summary>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.Write(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Write the parameters to the given XML writer
            </summary>
            <param name="writer">The writer to write to</param>
            <param name="includeGenerationParameters">Should parameters required for generating keys be included</param>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.Read(System.Xml.XmlReader)">
            <summary>
            Read parameters from the given XML reader
            </summary>
            <param name="reader">The reader to read from</param>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.SignText(System.String)">
            <summary>
            Sign the given text using the <see cref="P:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.ServerRSAProvider" /></summary>
            <param name="text">The text to sign</param>
            <returns>The signature for the text</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.VerifyText(System.String,System.String)">
            <summary>
            Verify that the given text was signed using the <see cref="P:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.ServerRSAProvider" /></summary>
            <param name="text">The text to verify</param>
            <param name="signature">The RSA signature</param>
            <returns>True if the text was signed with the given signature</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.SignData(System.Byte[])">
            <summary>
            Sign the given data using the <see cref="P:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.ServerRSAProvider" /></summary>
            <param name="data">The data to sign</param>
            <returns>The signature for the text</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.VerifyData(System.Byte[],System.Byte[])">
            <summary>
            Verify that the given data was signed using the <see cref="P:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.ServerRSAProvider" /></summary>
            <param name="data">The data to verify</param>
            <param name="signature">The RSA signature</param>
            <returns>True if the text was signed with the given signature</returns>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.ServerRSAProvider">
            <summary>
            The RSA provider used by the server to sign/validate licenses
            </summary>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.Write(System.Xml.XmlWriter,System.Boolean,System.Boolean)">
            <summary>
            Write the parameters to the given XML writer
            </summary>
            <param name="writer">The writer to write to</param>
            <param name="includeAuthenticationParameters">Should parameters required for authenticating keys be included</param>
            <param name="includeGenerationParameters">Should parameters required for generating keys be included</param>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.WriteToString(System.Boolean,System.Boolean)">
            <summary>
            Write the parameters to an XML string
            </summary>
            <param name="includeAuthenticationPrivateParameters">Should parameters required to authenticate keys be included</param>
            <param name="includeEncryptedLicensePrivateParameters">Should the private parameters for validating <see cref="T:Infralution.Licensing.ASP.EncryptedLicense" /> be included</param>
            <returns>The parameters in a formatted XML string</returns>
        </member>
        <member name="T:Infralution.Licensing.ASP.AuthenticatedLicenseException">
            <summary>
            Base License Exception class
            </summary>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required for remoting serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Infralution.Licensing.ASP.AuthenticationsExceededException">
            <summary>
            Thrown by <see cref="!:AuthenticatedLicenseProvider.AuthenticateKey(string)" /> if the 
            maximum number of allowed authentications has been exceeded
            </summary>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticationsExceededException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticationsExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required for remoting serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Infralution.Licensing.ASP.LicenseExpiredException">
            <summary>
            Thrown by <see cref="!:AuthenticatedLicenseProvider.AuthenticateKey(string)" /> if the 
            license date has expired
            </summary>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseExpiredException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseExpiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required for remoting serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Infralution.Licensing.ASP.DeauthenticationsExceededException">
            <summary>
            Thrown by <see cref="!:AuthenticatedLicenseProvider.DeauthenticateLicense" /> if the 
            maximum number of allowed deauthentications has been exceeded
            </summary>
        </member>
        <member name="M:Infralution.Licensing.ASP.DeauthenticationsExceededException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Infralution.Licensing.ASP.DeauthenticationsExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required for remoting serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Infralution.Licensing.ASP.LicenseRevokedException">
            <summary>
            Thrown by <see cref="!:AuthenticatedLicenseProvider.Reauthenticate(AuthenticatedLicense)" /> if the 
            license has been transferred or is running on another computer
            </summary>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseRevokedException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseRevokedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required for remoting serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Infralution.Licensing.ASP.LicenseNotFoundException">
            <summary>
            Thrown by <see cref="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> if the 
            license is not present.
            </summary>
        </member>
        <member name="T:Infralution.Licensing.ASP.BackgroundReauthenticationFailedEventArgs">
            <summary>
            Defines the data passed to the BackgroundReauthenticationFailedEvent
            </summary>
        </member>
        <member name="M:Infralution.Licensing.ASP.BackgroundReauthenticationFailedEventArgs.#ctor(Infralution.Licensing.ASP.AuthenticatedLicenseException)">
            <summary>
            Create a new instance of the event data
            </summary>
            <param name="exception">The error message indicating why reauthentication failed</param>
        </member>
        <member name="P:Infralution.Licensing.ASP.BackgroundReauthenticationFailedEventArgs.Exception">
            <summary>
            The exception that occurred
            </summary>
        </member>
        <member name="T:Infralution.Licensing.ASP.BackgroundReauthenticationFailedHandler">
            <summary>
            Represents the method to handle the BackgroundReauthenticationFailed event
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event data</param>
        </member>
        <member name="T:Infralution.Licensing.ASP.AuthenticatedLicenseProvider">
            <summary>
            Defines a .NET LicenseProvider that authenticates license keys to run on a particular Computer
            by contacting an Authentication Web Service.
            </summary>
            <remarks>
                <para>
            When a user installs an authenticated license key for a product the AuthenticatedLicenseProvider
            contacts the Authentication Web Service.  It validates the license key and returns a signed 
            <see cref="T:Infralution.Licensing.ASP.AuthenticatedLicense" /> locked to the users computer.   When the application is run subsequently 
            the AuthenticatedLicenseProvider validates that the installed license matches the users computer and verifies
            the public key signature.   This prevents users modifying or copying licenses files between computers.  The 
            Authentication Web Service can be configured (using the License Tracker application) to limit the number of 
            different computers that a given license key can be used to authenticate.
            </para>
                <para>
            By default the <see cref="P:System.Environment.MachineName" /> (or the host name 
            for ASP.NET applications) is used to identify the computer.   This is generally sufficient to inhibit copying 
            while still providing flexibility to the end user.   They can change hardware and even operating system without 
            invalidating their licenses.  If, however, you wish to lock licenses to other hardware or computer characteristics
            you can do this by overriding the <see cref="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.GetComputerID" /> method.
            </para>
                <para>
            See <see href="b617d141-c6c9-4d86-b93e-b049fc12fd72.htm" target="_self">Getting Started</see> 
            for detailed information on using AuthenticatedLicenseProvider to license applications and components.
            </para>
            </remarks>
            <seealso cref="T:Infralution.Licensing.ASP.AuthenticatedLicense" />
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.#ctor(Infralution.Licensing.ASP.AuthenticatedLicenseParameters,System.String,System.Boolean)">
            <summary>
            Create a new License Provider using the given parameters
            </summary>
            <param name="parameters">The parameters to use for validating licenses</param>
            <param name="licenseFile">The license file to use. If a full path is not specified then
            the path is relative to the entry executable directory 
            (or aspx files for ASP.NET applications)</param>
            <param name="floatingLicenseProvider">Is this provider being used for floating licenses</param>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.#ctor(Infralution.Licensing.ASP.AuthenticatedLicenseParameters,System.String)">
            <summary>
            Create a new (non-floating) License Provider using the given parameters
            </summary>
            <param name="parameters">The parameters to use for validating licenses</param>
            <param name="licenseFile">The license file to use. If a full path is not specified then
            the path is relative to the entry executable directory 
            (or aspx files for ASP.NET applications)</param>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Create a new License Provider using the given parameters
            </summary>
            <param name="xmlParameters">The parameters as XML to use for validating licenses</param>
            <param name="licenseFile">The license file to use. If a full path is not specified then
            the path is relative to the entry executable directory 
            (or aspx files for ASP.NET applications)</param>
            <param name="floatingLicenseProvider">Is this provider being used for floating licenses</param>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.#ctor(System.String,System.String)">
            <summary>
            Create a new (non-floating) License Provider using the given parameters
            </summary>
            <param name="xmlParameters">The parameters as XML to use for validating licenses</param>
            <param name="licenseFile">The license file to use. If a full path is not specified then
            the path is relative to the entry executable directory 
            (or aspx files for ASP.NET applications)</param>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.FloatingLicenseProvider">
            <summary>
            Is this provider used for installing and validating floating licenses 
            </summary>
            <remarks>
            If true then normal (non-floating) licenses cannot be validated by the provider.
            If false then floating licenses cannot be validated by the provider.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.Parameters">
            <summary>
            Get the Parameters for validating <see cref="T:Infralution.Licensing.ASP.AuthenticatedLicense">AuthenticatedLicenses</see></summary>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.GenerateKey(System.String,System.Int32)">
            <summary>
            Generate an authenticated license key
            </summary>
            <param name="productInfo">User defined data to be included in the key</param>
            <param name="serialNo">The unique license serial number</param>
            <returns>An authenticated license key</returns>
            <remarks>
            If there is no installed license for the Infralution Licensing System then the only 
            allowed productPassword is "TEST" and the only allowed serial numbers are 1 or 0. 
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.CreateUnauthenticatedLicense(System.String)">
            <summary>
            Create an unauthenticated license
            </summary>
            <param name="authenticationKey">The authentication key</param>
            <returns>A new unauthenticated license</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.IsValid(Infralution.Licensing.ASP.AuthenticatedLicense)">
            <summary>
            Returns true if the license status is valid OR if the license status is expired
            and <see cref="P:Infralution.Licensing.ASP.AuthenticatedLicenseParameters.DisableExpiredLicenses" /> is false.
            </summary>
            <param name="license">Checks the license is valid</param>
            <returns>True if the license is valid for installation</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.DecryptAuthenticationKey(System.String)">
            <summary>
            Called by the Authentication Server to decrypt authentication keys
            </summary>
            <param name="authenticationKey">The authentication key</param>
            <returns>The encrypted license</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.ValidateLicense(Infralution.Licensing.ASP.AuthenticatedLicense,System.ComponentModel.LicenseContext,System.Type)">
            <summary>
            Validate that the given license is legitimate on this computer and set its status
            </summary>
            <param name="license">The license to validate</param>
            <param name="context">The license context</param>
            <param name="type">The type the license is associated with</param>
            <returns>The license status</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.ValidateLicense(Infralution.Licensing.ASP.AuthenticatedLicense)">
            <summary>
            Validate that the given license is legitimate on this computer
            </summary>
            <param name="license">The license to validate</param>
            <returns>The license status</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>
            Get a license (if installed) for the given component/control type 
            </summary>
            <param name="context">The context (design or runtime)</param>
            <param name="type">The type to get the license for</param>
            <param name="instance">The object the license is for</param>
            <param name="allowExceptions">If true a <see cref="T:System.ComponentModel.LicenseException" /> is thrown if a valid license cannot be loaded</param>
            <returns>An encrypted license</returns>
            <remarks>
            This method is used to get licenses for components and controls.  Applications should 
            use the <see cref="!:GetLicense(bool)" /> method.  This method is not typically called 
            directly by application code.  Instead the component or control uses the 
            <see cref="M:System.ComponentModel.LicenseManager.IsValid(System.Type)" /> or <see cref="M:System.ComponentModel.LicenseManager.Validate(System.Type)" /> 
            methods which find the <see cref="T:System.ComponentModel.LicenseProvider" /> for the type and call this method.
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.InstallLicense(Infralution.Licensing.ASP.AuthenticatedLicense)">
            <summary>
            Install a license by writing it to file 
            </summary>
            <remarks>
            The AuthenticatedLicenseInstallForm uses this method to install licenses for applications.  
            Client applications may implement their own registration forms that call this method.  
            </remarks>
            <param name="license">The license to install</param>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.UninstallLicense">
            <summary>
            Uninstall the current license
            </summary>
            <remarks>
            Deletes the license file
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.ReadLicense(System.Xml.XmlTextReader)">
            <summary>
            Read a license from an <see cref="T:System.Xml.XmlTextReader" /></summary>
            <param name="reader">The XML reader to use</param>
            <returns>A new (unvalidated) license</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.ReadLicense(System.String)">
            <summary>
            Read a license from the given file
            </summary>
            <param name="licenseFile">The file to read the license from</param>
            <returns>A new (unvalidated) license</returns>
            <remarks>
            Use <see cref="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.ValidateLicense(Infralution.Licensing.ASP.AuthenticatedLicense)" /> to validate that the license 
            is valid for this computer
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.ReadLicenseFromString(System.String)">
            <summary>
            Read a license from a string
            </summary>
            <param name="licenseXml">A string containing the license XML</param>
            <returns>A new (unvalidated) license</returns>
            <remarks>
            Use <see cref="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.ValidateLicense(Infralution.Licensing.ASP.AuthenticatedLicense)" /> to validate that the license 
            is valid for this computer
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.WriteLicense(System.Xml.XmlTextWriter,Infralution.Licensing.ASP.AuthenticatedLicense)">
            <summary>
            Write the license out using the given <see cref="T:System.Xml.XmlTextWriter" /></summary>
            <param name="license">The license to write</param>
            <param name="writer">The writer to use</param>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.WriteLicense(System.String,Infralution.Licensing.ASP.AuthenticatedLicense)">
            <summary>
            Write the license out to the given file
            </summary>
            <param name="license">The license to write</param>
            <param name="licenseFile">The file to write the license to</param>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.WriteLicenseToString(Infralution.Licensing.ASP.AuthenticatedLicense)">
            <summary>
            Write the license out to an XML string
            </summary>
            <param name="license">The license to write</param>
            <returns>A string containing the XML for the license</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.GetComputerID">
            <summary>
            Return the string used to identify the computer the license should be authenticated for
            </summary>
            <returns>A string identifying the computer</returns>
            <remarks>
            This id is included in the authenticated license and checked when the license
            is validated.   This prevents a license being authenticated on one machine and 
            then copied to another.  The default implementation returns the <see cref="P:System.Environment.MachineName" />
            (or the host name for ASP.NET applications).
            While a user could change the machine name to match a copied license it is generally
            inconvenient for them to do so (particularly in a networked environment).   If
            you want a stronger deterrent to copying then you can override this method and return 
            a string based on other hardware characteristics
            </remarks>
            <seealso cref="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.IsThisComputer(System.String)" />
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.IsThisComputer(System.String)">
            <summary>
            Check if the given computer ID matches this computer
            </summary>
            <param name="computerID">The id to check</param>
            <returns>True if the computerID is for this computer</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.GetApplicationData">
            <summary>
            Returns application data (if any) to be registered by default when keys are authenticated
            </summary>
            <returns>A string to pass to the authentication server</returns>
            <remarks>
            This can be overridden to pass application specific data back to the authentication server
            where it is registered in the database against the authentication.  You could for instance
            return information about the computer OS and environment for support purposes.  The default 
            implementation returns null.
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.ShowInvalidStatusMessage(Infralution.Licensing.ASP.AuthenticatedLicense)">
            <summary>
            Display the default error message when <see cref="P:Infralution.Licensing.ASP.AuthenticatedLicense.Status" /> is not <see cref="F:Infralution.Licensing.ASP.AuthenticatedLicenseStatus.Valid" /></summary>
            <param name="license">The license to display the message for</param>
            <remarks>
            If called from an interactive application then displays a message box - otherwise
            the error is sent to the trace output window.
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.GetLicenseStatusText(Infralution.Licensing.ASP.AuthenticatedLicense)">
            <summary>
            Return the status text to display for the license
            </summary>
            <param name="license">The license</param>
            <returns>The status text</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.GetEncryptedLicenseProvider">
            <summary>
            Return an instance of the encrypted license provider used to generate and validate keys
            </summary>
            <returns>A new instance of an <see cref="T:Infralution.Licensing.ASP.EncryptedLicenseProvider" /></returns>
            <remarks>
            Override this method to use a custom <see cref="T:Infralution.Licensing.ASP.EncryptedLicenseProvider" /></remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.GetLicenseFilePath">
            <summary>
            Called by <see cref="!:GetLicense(bool)" /> to get the file path to obtain the 
            license from 
            </summary>
            <remarks>
            This can be overridden to change the file path for the provider.  
            </remarks>
            <returns>The path of the license file</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.WriteTextData(System.Xml.XmlTextWriter,System.String,System.String)">
            <summary>
            Write the given text data to the XML writer
            </summary>
            <param name="writer">The writer to use</param>
            <param name="elementName">The name of the element</param>
            <param name="data">The data to write</param>
            <remarks>
            If the data is XML (ie the string starts with a &lt;) then the data is formatted
            as XML otherwise it is written as content
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.ReadTextData(System.Xml.XmlTextReader)">
            <summary>
            Read string data from the given XML reader
            </summary>
            <param name="reader">The reader to use</param>
            <returns>The data string</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.GetValidStatusText(Infralution.Licensing.ASP.AuthenticatedLicense)">
            <summary>
            Return the status text for a valid license
            </summary>
            <param name="license">The license</param>
            <returns>The status text</returns>
            <remarks>
            Can be overriden to customize the text displayed
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.GetExpiredStatusText(Infralution.Licensing.ASP.AuthenticatedLicense)">
            <summary>
            Return status text for a license that has expired
            </summary>
            <param name="license">The license</param>
            <returns>The status text</returns>
            <remarks>
            Can be overriden to customize the text displayed
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.ShowError(System.String,System.String)">
            <summary>
            Display an error to a message box or the trace output
            </summary>
            <param name="title">The title for the error</param>
            <param name="message">The error message</param>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.FixHostName(System.String)">
            <summary>
            Strip the leading "www." of host names (if present) and return lowercase
            </summary>
            <param name="hostName">The name to fix</param>
            <returns>Returns the host name minus www. prefix</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.AuthenticatedLicenseProvider.IsTerminalServicesClient">
            <summary>
            Returns true if this client is running within a Terminal Services client.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infralution.Licensing.ASP.EncryptedLicense">
            <summary>
            Defines an encrypted license for an application or component generated using the Infralution
            Licensing System.
            </summary>
            <remarks>
            The Infralution Licensing System provides a secure way of licensing .NET controls,
            components and applications.   Licenses are protected using public key encryption to
            minimize possibility of cracking.
            </remarks>
            <seealso cref="T:Infralution.Licensing.ASP.EncryptedLicenseProvider" />
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicense.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Create a new Infralution Encrypted License
            </summary>
            <param name="key">The key for the license</param>
            <param name="serialNo">The serial number of the license</param>
            <param name="productInfo">The product data associated with the license</param>
        </member>
        <member name="P:Infralution.Licensing.ASP.EncryptedLicense.LicenseKey">
            <summary>
            The license key for the license
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.EncryptedLicense.ProductInfo">
            <summary>
            The product data associated with the license
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.EncryptedLicense.SerialNo">
            <summary>
            The unique serial no for the license
            </summary>
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicense.Dispose">
            <summary>
            Cleans up any resources held by the license
            </summary>
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicense.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create the encrypted license from binary serialization
            </summary>
            <param name="info">The object to serialize from</param>
            <param name="context">The serialization context</param>
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicense.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Get the binary serialized data for the license
            </summary>
            <param name="info">The object to serialize into</param>
            <param name="context">The serialization context</param>
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicense.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implement the ISerializable interface
            </summary>
            <param name="info">The object to serialize into</param>
            <param name="context">The serialization context</param>
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicense.Dispose(System.Boolean)">
            <summary>
            Handle disposing resources used by derived classes
            </summary>
            <param name="disposing">Is the object being disposed</param>
        </member>
        <member name="T:Infralution.Licensing.ASP.EncryptedLicenseParameters">
            <summary>
            The parameters used to generate and validate <see cref="T:Infralution.Licensing.ASP.EncryptedLicense">EncryptedLicenses</see>
            using an <see cref="T:Infralution.Licensing.ASP.EncryptedLicenseProvider" /></summary>
            <seealso cref="T:Infralution.Licensing.ASP.EncryptedLicenseProvider" />
        </member>
        <member name="P:Infralution.Licensing.ASP.EncryptedLicenseParameters.ProductName">
            <summary>
            The name of the product being licensed
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.EncryptedLicenseParameters.ProductPassword">
            <summary>
            The password used to encrypt the license data
            </summary>
            <remarks>
            The <see cref="P:Infralution.Licensing.ASP.EncryptedLicenseParameters.KeyStrength" /> determines the number of characters of the ProductPassword that are
            actually used in generating keys.   If the ProductPassword is shorter than the <see cref="P:Infralution.Licensing.ASP.EncryptedLicenseParameters.KeyStrength" /> then 
            it is padded.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.ASP.EncryptedLicenseParameters.KeyStrength">
            <summary>
            The strength of the key to generate.   
            </summary>
            <remarks>
            The KeyStrength determines the number of characters of the <see cref="P:Infralution.Licensing.ASP.EncryptedLicenseParameters.ProductPassword" /> that are
            actually used in generating keys.    The smaller the KeyStrength the shorter the generated keys.
            If the <see cref="P:Infralution.Licensing.ASP.EncryptedLicenseParameters.ProductPassword" /> is shorter than the KeyStrength then it is padded.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.ASP.EncryptedLicenseParameters.TextEncoding">
            <summary>
            The encoding used to convert the binary key to text
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.EncryptedLicenseParameters.ChecksumProductInfo">
            <summary>
            Should a checksum of the <see cref="P:Infralution.Licensing.ASP.EncryptedLicense.ProductInfo" /> be included in the key  
            </summary>
            <remarks>
            If true a checksum is included in generated keys to check that the contents of the 
            <see cref="P:Infralution.Licensing.ASP.EncryptedLicense.ProductInfo" /> are valid.  This is only necessary if the 
            ProductInfo is potentially more than 6 characters long.  For ProductInfo of less than 7 
            characters the block encryption algorithm used to encrypt the overall key guarantees the validity
            of the ProductInfo.  
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.ASP.EncryptedLicenseParameters.ShortSerialNo">
            <summary>
            If true serial numbers must be less than <see cref="F:System.UInt16.MaxValue" />.  
            </summary>
            <remarks>
            Setting this to true enables the generated key to be kept as short as possible.   The default
            value for backward compatibility with previous versions is true.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.ASP.EncryptedLicenseParameters.MaxSerialNo">
            <summary>
            Return the maximum serial no.
            </summary>
            <remarks>
            This returns the maximum allowed serial no based on the value of the <see cref="P:Infralution.Licensing.ASP.EncryptedLicenseParameters.ShortSerialNo" />
            property.
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicenseParameters.ReadFromString(System.String)">
            <summary>
            Read the parameters from an XML string
            </summary>
            <param name="xmlParameters"></param>
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicenseParameters.WriteToString(System.Boolean)">
            <summary>
            Write the parameters to an XML string
            </summary>
            <param name="includeGenerationParameters">Should parameters required for generating keys be included</param>
            <returns>The parameters in a formatted XML string</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicenseParameters.Read(System.Xml.XmlReader)">
            <summary>
            Read the parameters from an XML Reader
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicenseParameters.Write(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Write the parameters to an XML Writer
            </summary>
            <param name="writer">The XML Writer to write to</param>
            <param name="includeGenerationParameters">Should parameters required for generating keys be included</param>
        </member>
        <member name="T:Infralution.Licensing.ASP.EncryptedLicenseProvider">
            <summary>
            Defines a .NET LicenseProvider that generates and validates simple, secure 
            <see cref="T:Infralution.Licensing.ASP.EncryptedLicense">EncryptedLicenses</see>.
            </summary>
            <remarks>
            The EncryptedLicenseProvider generates simple license keys which are validated using
            a public key encryption algorithm to minimize the possibility of cracking.  See 
            <see href="b617d141-c6c9-4d86-b93e-b049fc12fd72.htm" target="_self">Getting Started</see>
            for detailed information on using EncryptedLicenseProvider to license applications and components.
            </remarks>
            <seealso cref="T:Infralution.Licensing.ASP.EncryptedLicense" />
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicenseProvider.#ctor(Infralution.Licensing.ASP.EncryptedLicenseParameters,System.String)">
            <summary>
            Create a new License Provider using the given parameters
            </summary>
            <param name="parameters">The parameters to use for validating licenses</param>
            <param name="licenseFile">The license file to use. If a full path is not specified then
            the path is relative to the entry executable directory 
            (or aspx files for ASP.NET applications)</param>
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicenseProvider.#ctor(System.String,System.String)">
            <summary>
            Create a new License Provider using the given parameters
            </summary>
            <param name="xmlParameters">The parameters as XML to use for validating licenses</param>
            <param name="licenseFile">The license file to use. If a full path is not specified then
            the path is relative to the entry executable directory 
            (or aspx files for ASP.NET applications)</param>
        </member>
        <member name="P:Infralution.Licensing.ASP.EncryptedLicenseProvider.Parameters">
            <summary>
            Get the Parameters for validating <see cref="T:Infralution.Licensing.ASP.EncryptedLicense">EncryptedLicenses</see></summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.EncryptedLicenseProvider.LicenseFile">
            <summary>
            Get the License File to use  
            </summary>
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicenseProvider.GenerateKey(System.String,System.Int32)">
            <summary>
            Generate a new encrypted license
            </summary>
            <param name="productInfo">User defined data to be included in license key</param>
            <param name="serialNo">The unique license serial number for the</param>
            <returns>An encrypted license key</returns>
            <remarks>
            If there is no installed license for the Infralution Licensing System then the only 
            allowed password is "TEST" and the only allowed serial numbers are 1 or 0.  
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicenseProvider.GenerateRuntimeKey(System.String)">
            <summary>
            Generate a runtime license key from the given design time license key
            </summary>
            <param name="designTimeLicenseKey">The design time license key to use</param>
            <returns>A runtime license key (or null if the designTimeLicenseKey can't be validated)</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicenseProvider.InstallLicense(Infralution.Licensing.ASP.EncryptedLicense)">
            <summary>
            Install a license by writing it to file 
            </summary>
            <param name="license">The license to install</param>
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicenseProvider.InstallLicense(System.String)">
            <summary>
            Install a license key  
            </summary>
            <remarks>
            Validates the given license key and then installs the license.
            This method is an alternative to calling <see cref="M:Infralution.Licensing.ASP.EncryptedLicenseProvider.ValidateLicenseKey(System.String)" /> and then
            <see cref="M:Infralution.Licensing.ASP.EncryptedLicenseProvider.InstallLicense(Infralution.Licensing.ASP.EncryptedLicense)" />.
            </remarks>
            <param name="licenseKey">The license key to install</param>
            <returns>A license if succesful or null/nothing if not</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicenseProvider.UninstallLicense">
            <summary>
            Uninstall the license by deleting the license file
            </summary>
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicenseProvider.ValidateLicenseKey(System.String,System.ComponentModel.LicenseContext,System.Type)">
            <summary>
            Check  that the given license key is valid
            </summary>
            <param name="licenseKey">The license key to validate</param>
            <param name="context">The current licensing context</param>
            <param name="type">The type to be licensed</param>
            <returns>An <see cref="T:Infralution.Licensing.ASP.EncryptedLicense" /> or null if licenseKey is not valid</returns>
            <remarks>
            This method is called to validate the licence key for a type.  If the license context is a design
            time context then it generates a runtime license key and saves it in the context.
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicenseProvider.ValidateLicenseKey(System.String)">
            <summary>
            Validate that the given license key is valid for the current licensing parameters
            </summary>
            <param name="licenseKey">The license key to validate</param>
            <returns>The encrypted license if the key is valid otherwise null</returns>
            <remarks>
            This method provides a mechanism to validate that a given license key is valid
            prior to attempting to install it.   This can be useful if you want to check
            the <see cref="P:Infralution.Licensing.ASP.EncryptedLicense.ProductInfo" /> before installing the license.
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicenseProvider.GetLicense">
            <summary>
            Get a license (if installed) from the license file.
            </summary>
            <returns>The installed license if any</returns>
            <remarks>
            This method is used to read licenses for applications.  Components and controls should use the 
            <see cref="T:System.ComponentModel.LicenseManager" /> methods to load and validate licenses.  
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>
            Get a license (if installed) for the given component/control type 
            </summary>
            <param name="context">The context (design or runtime)</param>
            <param name="type">The type to get the license for</param>
            <param name="instance">The object the license is for</param>
            <param name="allowExceptions">If true a <see cref="T:System.ComponentModel.LicenseException" /> is thrown if a valid license cannot be loaded</param>
            <returns>An encrypted license</returns>
            <remarks>
            This method is used to get licenses for components and controls.  Applications should 
            use the <see cref="M:Infralution.Licensing.ASP.EncryptedLicenseProvider.GetLicense" /> method.  This method is not typically called directly by application code.  
            Instead the component or control uses the <see cref="M:System.ComponentModel.LicenseManager.IsValid(System.Type)" /> or
            <see cref="M:System.ComponentModel.LicenseManager.Validate(System.Type)" /> methods which find the <see cref="T:System.ComponentModel.LicenseProvider" /> for the type
            and call this method.
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Reflection.Assembly,System.Type)">
            <summary>
            Return the license for the given type from a given DLL assembly resources
            </summary>
            <param name="context">The license context to validate the license in</param>
            <param name="assembly">The assembly containing the license</param>
            <param name="type">The type to get the license for</param>
            <returns>The license key if any</returns>
            <remarks>
            This method can be used to check the given DLL assembly for a license.  By default the .NET licensing
            framework only checks the entry assembly (ie typically executables) for licenses.  This means
            that if a licensed control is wrapped in another control, the customer of the wrapped control will
            still required a design time license key for the original control.  This is generally the behaviour
            that control authors would like.  If however you want to provide a license that enables a customer
            to create new component/controls using your control/component then you can achieve this by using 
            this method to check for a license in the CallingAssembly that created the control/component.
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicenseProvider.EncodeToText(System.Byte[],Infralution.Licensing.ASP.TextEncoding)">
            <summary>
            Converts a byte array into a text representation.
            </summary>
            <param name="data">The byte data to convert</param>
            <param name="encoding">The encoding to use</param>
            <returns>Text representation of the data</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicenseProvider.DecodeFromText(System.String,Infralution.Licensing.ASP.TextEncoding)">
            <summary>
            Converts a string into a byte array.
            </summary>
            <param name="text">The text to convert</param>
            <param name="encoding">The encoding to use</param>
            <returns>The converted byte data</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicenseProvider.ValidateLicenseKey(System.String,System.ComponentModel.LicenseUsageMode,System.Boolean,System.String@)">
            <summary>
            Check that the given license key is valid and optionally generate a runtime license key
            </summary>
            <param name="licenseKey">The license key to validate</param>
            <param name="usageMode">The usage mode that we want to validate the license key for</param>
            <param name="generateRuntimeLicenseKey">Should a runtime license be generated from the license - usageMode must also be DesignTime</param>
            <param name="runtimeLicenseKey">The generated runtime license (if any)</param>
            <returns>An <see cref="T:Infralution.Licensing.ASP.EncryptedLicense" /> or null if licenseKey is not valid</returns>
            <remarks>
            This method implements the core validation logic (other ValidateLicenseKey methods call it) and optionally
            generates a runtime license key.
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicenseProvider.ReadKeyFromFile(System.String)">
            <summary>
            Read a license key from the given file
            </summary>
            <param name="licenseFile">The path to the license file to read the key from</param>
            <returns>The license key if any</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicenseProvider.WriteKeyToFile(System.String,System.String)">
            <summary>
            Write a license key to the given file
            </summary>
            <param name="licenseFile">The path to the license file to write the key to</param>
            <param name="licenseKey">The license key to write</param>
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicenseProvider.GetLicenseFilePath">
            <summary>
            Called by <see cref="M:Infralution.Licensing.ASP.EncryptedLicenseProvider.GetLicense" /> to get the file path to obtain the 
            license from 
            </summary>
            <remarks>
            This can be overridden to change the file path for the provider.  
            </remarks>
            <returns>The path of the license file</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.EncryptedLicenseProvider.ShowError(System.String,System.String)">
            <summary>
            Display an error to a message box or the trace output
            </summary>
            <param name="title">The title for the error</param>
            <param name="message">The error message</param>
        </member>
        <member name="T:Infralution.Licensing.ASP.EvaluationMonitor">
            <summary>
            Defines the base class for managing time/usage limited evaluations of products.  The 
            <see cref="T:Infralution.Licensing.ASP.RegistryEvaluationMonitor" /> and <see cref="!:IsolatedStorageEvaluationMonitor" /> classes provide
            concrete instances of this class that store the data in the registry and isolated storage respectively.
            </summary>
            <remarks>
                <para>
            Instantiate an instance of a derived class to read/write the evaluation parameters for the   
            given product.  The <see cref="P:Infralution.Licensing.ASP.EvaluationMonitor.FirstUseDate" /> is set the first time that
            the class is instantiated.  The <see cref="P:Infralution.Licensing.ASP.EvaluationMonitor.LastUseDate" /> and <see cref="P:Infralution.Licensing.ASP.EvaluationMonitor.UsageCount" /> 
            properties are set each time the class is instantiated (or once per day if
            the <see cref="P:Infralution.Licensing.ASP.EvaluationMonitor.CountUsageOncePerDay" /> property is set to true).
            </para>
                <para>
            Note that evaluation data must be stored somewhere on the users 
            hard disk.  It is therefore not too difficult for a sophisticated user to determine the 
            changes made either to registry keys or files (using file/registry monitoring software) 
            and restore the state of these to their pre-installation state (thus resetting the 
            evaluation period).  For this reason it is recommended that you don't rely on this 
            mechanism alone.  You should also consider limiting the functionality of your product 
            in some way or adding nag screens to discourage long term use of evaluation versions.
            </para>
                <para>
            If you have a data oriented application you can increase the security of evaluations by
            storing the current <see cref="P:Infralution.Licensing.ASP.EvaluationMonitor.UsageCount" /> somewhere in your database each time the 
            application runs and cross checking this with the number returned by the EvaluationMonitor.
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.EvaluationMonitor.#ctor(System.String,System.Boolean)">
            <summary>
            Initialize a new instance of the evaluation monitor.
            </summary>
            <param name="countUsageOncePerDay">Should the usage count only be incremented once per day</param>
            <param name="productId">A unique Id for this product</param>
            <remarks>
            If countUsageOncePerDay is set to true then the <see cref="P:Infralution.Licensing.ASP.EvaluationMonitor.UsageCount" /> is only incremented once
            for each day that the product is actually used.   If countUsageOncePerDay is false then the <see cref="P:Infralution.Licensing.ASP.EvaluationMonitor.UsageCount" />
            is incremented each time a new evaluation monitor is instantiated for a product
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.ASP.EvaluationMonitor.CountUsageOncePerDay">
            <summary>
            Get whether the <see cref="P:Infralution.Licensing.ASP.EvaluationMonitor.UsageCount" /> should be incremented only once per day 
            </summary>
            <remarks>
            If CountUsageOncePerDay is set to true then the <see cref="P:Infralution.Licensing.ASP.EvaluationMonitor.UsageCount" /> is only incremented once
            for each day that the product is actually used.   If CountUsageOncePerDay is false then 
            the <see cref="P:Infralution.Licensing.ASP.EvaluationMonitor.UsageCount" /> is incremented each time a new evaluation monitor is instantiated for 
            a given product id. To change this property set the corresponding parameter in the constructor.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.ASP.EvaluationMonitor.UsageCount">
            <summary>
            Return the number of times the product has been used 
            </summary>
            <remarks>
            If <see cref="P:Infralution.Licensing.ASP.EvaluationMonitor.CountUsageOncePerDay" /> is set to true then the UsageCount is only incremented once
            for each day that the product is actually used.   If <see cref="P:Infralution.Licensing.ASP.EvaluationMonitor.CountUsageOncePerDay" /> is false then 
            the UsageCount is incremented each time a new evaluation monitor is instantiated for 
            a given product id.  Typically you should instantiate an EvaluationMonitor object just once in your 
            software.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.ASP.EvaluationMonitor.FirstUseDate">
            <summary>
            Return the date/time the product was first used
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.EvaluationMonitor.LastUseDate">
            <summary>
            Return the date/time the product was last used
            </summary>
            <remarks>
            If <see cref="P:Infralution.Licensing.ASP.EvaluationMonitor.CountUsageOncePerDay" /> is set to true then this is the date
            at which the usage count was last updated - otherwise it is the date at 
            which the EvaluationMonitor was last created.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.ASP.EvaluationMonitor.DaysInUse">
            <summary>
            Return the number of days since the product was first run.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.EvaluationMonitor.Invalid">
            <summary>
            Returns true if the evaluation monitor detects attempts to circumvent
            evaluation limits by tampering with the hidden evaluation data or winding
            the PC clock backwards 
            </summary>
        </member>
        <member name="M:Infralution.Licensing.ASP.EvaluationMonitor.Reset(System.Boolean)">
            <summary>
            Allows you to reset the evaluation period.
            </summary>
            <remarks>
            This can be useful if a customer needs an extension to their evaluation period
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.EvaluationMonitor.UpdateMonitor(System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Called by derived classes to set the monitor parameters, update the usage count
            and check for clock winding
            </summary>
            <param name="firstUseDate">The date the monitor was first used</param>
            <param name="lastUseDate">The date the monitor was last used</param>
            <param name="usageCount">The usage count</param>
            <returns>True if the monitor parameters have changed</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.EvaluationMonitor.DeleteData(System.String)">
            <summary>
            Overridden by derived classes to delete the evaluation data
            </summary>
        </member>
        <member name="M:Infralution.Licensing.ASP.EvaluationMonitor.Dispose(System.Boolean)">
            <summary>
            Handle disposing resources used by derived classes
            </summary>
            <param name="disposing">Is the object being disposed</param>
        </member>
        <member name="M:Infralution.Licensing.ASP.EvaluationMonitor.Dispose">
            <summary>
            Free resources used by the EvaluationMonitor
            </summary>
        </member>
        <member name="M:Infralution.Licensing.ASP.EvaluationMonitor.Finalize">
            <summary>
            Finalizer calls Dispose to cleanup
            </summary>
        </member>
        <member name="T:Infralution.Licensing.ASP.LicenseResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.AuthenticatingTxt">
            <summary>
              Looks up a localized string similar to Authenticating.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.AuthenticationErrorMsg">
            <summary>
               Looks up a localized string similar to An unexpected error occurred while authenticating your license key. Do you want to save your license file and authenticate it offline? 
            
            Click "No" to fix your internet or firewall settings and then click the "Install" button to try again.
            
            Click "Yes" to save your license to a file to authenticate offline.
            
            Visit {1} to authenticate the license file yourself or send it to us and we will authenticate it for you.  Then use the "Load License" button to install the authenticated license file.
            
            Error: { [rest of string was truncated]";.
             </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.AuthenticationErrorTitle">
            <summary>
              Looks up a localized string similar to Authentication Error.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.AuthenticationsExceededMsg">
            <summary>
              Looks up a localized string similar to The number of installations allowed for this license key has been exceeded.   .
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.ConfirmUninstallMsg">
            <summary>
              Looks up a localized string similar to Are you sure you want to uninstall the current license?.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.ConfirmUninstallTitle">
            <summary>
              Looks up a localized string similar to Confirm License Uninstall.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.ConnectionErrorMsg">
            <summary>
               Looks up a localized string similar to Unable to connect to the License Authentication Server via the internet to authenticate your license on this computer. Do you want to save your license file and authenticate it offline? 
            
            Click "No" to fix your internet or firewall settings and then click the "Install" button to try again.
            
            Click "Yes" to save your license to a file to authenticate offline.
            
            Visit {0} to authenticate the license file yourself or send it to us and we will authenticate it for you.  Then use the "Load License" button to  [rest of string was truncated]";.
             </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.DeauthenticatingTxt">
            <summary>
              Looks up a localized string similar to Deauthenticating.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.DeauthenticationConnectionErrorMsg">
            <summary>
               Looks up a localized string similar to Unable to connect to the License Authentication Server via the internet to deauthenticate the license on this computer.   Do you want to try again?
            
            Fix your internet or firewall settings and click "Yes" to try again. 
            
            Click "No" to uninstall the license anyway..
             </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.DeauthenticationErrorMsg">
            <summary>
               Looks up a localized string similar to An unexpected error occurred while deauthenticating your license key.  Do you want to try again?
            
            Click "Yes" to try again. 
            
            Click "No" to uninstall the license anyway.
            
            Error: {0}.
             </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.DeauthenticationErrorTitle">
            <summary>
              Looks up a localized string similar to Deauthentication Error.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.DeauthenticationsExceededMsg">
            <summary>
              Looks up a localized string similar to The number of allowed user deauthentications of this license has been exceeded.  Please contact support if you wish to transfer this license to another computer..
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.EvaluationExpiredMsg">
            <summary>
              Looks up a localized string similar to Your evaluation period has expired.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.EvaluationInvalidMsg">
            <summary>
              Looks up a localized string similar to Your evaluation is no longer valid.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.ExpiresTxt">
            <summary>
              Looks up a localized string similar to  - Expires: {0:g}.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.FloatingLicenseErrorTxt">
            <summary>
              Looks up a localized string similar to The license is not a floating license.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.InvalidAuthenticationKeyMsg">
            <summary>
              Looks up a localized string similar to The key ({0}) is not a valid license key for this product..
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.InvalidAuthenticationKeyTitle">
            <summary>
              Looks up a localized string similar to Invalid License Key.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.InvalidComputerMsg">
            <summary>
               Looks up a localized string similar to The license is not valid for this computer.  This could be because you have changed the computer name since installing the license.
            
            Licensed Computer: {0}
            This Computer: {1}
            
            You may need to install a new license using the original License Key provided to you when you purchased the product.  .
             </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.InvalidILSFile">
            <summary>
              Looks up a localized string similar to Not a valid License Settings File.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.InvalidKeyMsg">
            <summary>
              Looks up a localized string similar to The key ({0}) is not a valid license key for this product..
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.InvalidKeyTitle">
            <summary>
              Looks up a localized string similar to Invalid License Key.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.InvalidLicenseTitle">
            <summary>
              Looks up a localized string similar to {0} - Invalid License.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.InvalidProductMsg">
            <summary>
              Looks up a localized string similar to The license is not a valid license for this product ({0}).  It is a license for another product ({1})..
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.InvalidSignatureMsg">
            <summary>
              Looks up a localized string similar to The license file contents have been modified and the license is no longer valid.  You may need to reinstall the license using the original License Key provided to you when you purchased the product..
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.LicenseExpiredExceptionMsg">
            <summary>
              Looks up a localized string similar to The license key has exceeded its expiry date.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.LicenseExpiredMsg">
            <summary>
              Looks up a localized string similar to Your license has expired.   Expiry Date: {0:g}.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.LicenseFile">
            <summary>
              Looks up a localized string similar to License.lic.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.LicenseFileFilter">
            <summary>
              Looks up a localized string similar to License Files|*.lic.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.LicenseRevokedMsg">
            <summary>
              Looks up a localized string similar to The license is no longer authenticated for use on this computer.  It has been deactivated or transferred to another computer.  Reinstall a license to continue using the software on this computer..
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.LoadLicenseTitle">
            <summary>
              Looks up a localized string similar to Load License from File.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.ReadErrorMsg">
            <summary>
               Looks up a localized string similar to An error ({0}) occurred while reading the license from file ({1}).  
            
            Ensure you have sufficient privileges to read from the license file..
             </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.ReadErrorTitle">
            <summary>
              Looks up a localized string similar to Error Reading License.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.ReadXmlErrorMsg">
            <summary>
              Looks up a localized string similar to An unexpected error ({0}) occurred while reading the license. .
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.SaveLicenseTitle">
            <summary>
              Looks up a localized string similar to Save License to File.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.StatusExpiredTxt">
            <summary>
              Looks up a localized string similar to License expired on: {0:g}.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.StatusInvalidComputerTxt">
            <summary>
              Looks up a localized string similar to The installed license is not for this computer.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.StatusInvalidKeyTxt">
            <summary>
              Looks up a localized string similar to License key is not valid for this product.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.StatusInvalidProductTxt">
            <summary>
              Looks up a localized string similar to Installed license is not for this product.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.StatusInvalidSignatureTxt">
            <summary>
              Looks up a localized string similar to License file signature is invalid.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.StatusNoneTxt">
            <summary>
              Looks up a localized string similar to No License Installed.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.StatusUnauthenticatedTxt">
            <summary>
              Looks up a localized string similar to The installed license has not been authenticated.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.StatusValidFloatingTxt">
            <summary>
              Looks up a localized string similar to {0} Floating License(s) Installed.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.StatusValidTxt">
            <summary>
              Looks up a localized string similar to License Installed.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.TerminalServicesNotAllowedMsg">
            <summary>
              Looks up a localized string similar to The license is not valid for use within Terminal Services or Citrix.   Please contact support to purchase a license that allows usage within Terminal Services..
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.UnauthenticatedLicenseMsg">
            <summary>
              Looks up a localized string similar to The license has not been authenticated..
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.UninstallErrorMsg">
            <summary>
               Looks up a localized string similar to An error ({0}) occurred while deleting the license file ({1}).  
            
            Ensure you have sufficient privileges to delete the license file..
             </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.UninstallErrorTitle">
            <summary>
              Looks up a localized string similar to Error Uninstalling License.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.UninstallLicenseMsg">
            <summary>
              Looks up a localized string similar to Do you want to uninstall your {0} license to allow you to install it on another machine?.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.WaitTxt">
            <summary>
              Looks up a localized string similar to Please Wait....
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.WriteErrorMsg">
            <summary>
               Looks up a localized string similar to An error ({0}) occurred while writing the license to file ({1}).  
            
            Ensure you have sufficient privileges to write to the license file..
             </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseResources.WriteErrorTitle">
            <summary>
              Looks up a localized string similar to Error Writing License.
            </summary>
        </member>
        <member name="T:Infralution.Licensing.ASP.TextEncoding">
            <summary>
            Defines the types of encoding possible for license keys
            </summary>
        </member>
        <member name="F:Infralution.Licensing.ASP.TextEncoding.Hex">
            <summary>
            Keys are encoded using hexadecimal notation (characters 0-9 and A-F)
            </summary>
        </member>
        <member name="F:Infralution.Licensing.ASP.TextEncoding.Base32">
            <summary>
            Keys are encoding using base 32 with the following character set (23456789ABCDEFGHJKLMNPQRSTUVWXYZ)
            </summary>
        </member>
        <member name="T:Infralution.Licensing.ASP.LicenseUtilities">
            <summary>
            Provides common utility methods for the Infralution Licensing classes
            </summary>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseUtilities.HandleIOExceptions">
            <summary>
            Should the licensing classes handle exceptions when reading and writing license files
            </summary>
            <remarks>
            Set this to false if you wish to handle these exceptions yourself
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.ASP.LicenseUtilities.UseMachineKeyStore">
            <summary>
            Determines whether RSA keys used to verify licenses are stored on a user or machine level
            </summary>
            <remarks>
            Setting this value to true may be useful when impersonating or running under an account 
            whose user profile is not loaded.  ILS will by default use the MachineKeyStore when there
            is no interactive user (ie services and ASP.NET) otherwise it will use the UserKeyStore.
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseUtilities.Checksum(System.String)">
            <summary>
            Returns a checksum string with a maximum length of 3 characters based on the given input string
            </summary>
            <param name="input">The input string to return a checksum for</param>
            <returns>An checksum that can be used to validate the given input string</returns>
            <remarks>
                <para>
            This function can be used to generate a short checksum that can be embedded in a
            license key as <see cref="P:Infralution.Licensing.ASP.EncryptedLicense.ProductInfo" />.  This allows you to tie 
            the license key to information supplied by the user (for instance the name of the 
            purchaser) without having to include the full information in the license key.  
            This enables license keys to be kept reasonably short.
            </para>
                <para>
            When the license is checked by the application it performs a checksum on the information
            supplied by the user and checks that it matches the information in the ProductInfo that
            was generated when the license was issued.   The License Tracker application provides
            support for "CustomGenerators" which allow you provide the code to generate the ProductInfo
            from customer and other information.
            </para>
                <para>
            The returned string has a maximum length of 3 characters - but may be shorter.   If you
            require a constant length checksum string then consider using the overloaded method that
            takes a pad parameter.
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseUtilities.Checksum(System.String,System.Int32,System.Boolean)">
            <summary>
            Returns a checksum string based on the given input string
            </summary>
            <param name="input">The input string to return a checksum for</param>
            <param name="maxLength">The maximum length of the checksum string</param>
            <param name="pad">If true the checksum is always padded to give a constant length string</param>
            <returns>An checksum that can be used to validate the given input string</returns>
            <remarks>
                <para>
            This function can be used to generate a short checksum that can be embedded in a
            license key as <see cref="P:Infralution.Licensing.ASP.EncryptedLicense.ProductInfo" />.  This allows you to tie 
            the license key to information supplied by the user (for instance the name of the 
            purchaser) without having to include the full information in the license key.  
            This enables license keys to be kept reasonably short.
            </para>
                <para>
            When the license is checked by the application it performs a checksum on the information
            supplied by the user and checks that it matches the information in the ProductInfo that
            was generated when the license was issued.   The License Tracker application provides
            support for "CustomGenerators" which allow you provide the code to generate the ProductInfo
            from customer and other information.
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseUtilities.Strip(System.String,System.String)">
            <summary>
            Return the given input string stripped of the given characters
            </summary>
            <param name="value">The string to strip</param>
            <param name="characters">The characters to strip from the string</param>
            <returns>The input string with the given characters removed</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseUtilities.ReadElementBase64(System.Xml.XmlReader,System.Int32)">
            <summary>
            Read a Base64 string from an XmlReader into a byte array
            </summary>
            <param name="reader">The XmlReader to read from</param>
            <param name="padToLength">Sets the size of the byte array with front padding</param>
            <returns>The byte data for the given element</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseUtilities.ReadElementBase64(System.Xml.XmlReader)">
            <summary>
            Read a Base64 string from an XmlReader into a byte array
            </summary>
            <param name="reader">The XmlReader to read from</param>
            <returns>The byte data for the given element</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseUtilities.ReadElementBase64(System.Xml.XmlReader,System.String)">
            <summary>
            Read a Base64 string from an XmlReader into a byte array
            </summary>
            <param name="reader">The XmlReader to read from</param>
            <param name="name">The name of the element</param>
            <returns>The byte data for the given element</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseUtilities.WriteElementBase64(System.Xml.XmlWriter,System.String,System.Byte[])">
            <summary>
            Write a byte array into Base64 string of an XmlWriter
            </summary>
            <param name="writer">The XmlWriter to write to</param>
            <param name="name">The name of the element</param>
            <param name="value">The data to write</param>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseUtilities.WriteRSAParameters(System.Security.Cryptography.RSACryptoServiceProvider,System.Xml.XmlWriter,System.String,System.Boolean)">
            <summary>
            Write RSA Parameters for an RSA Provider to an XmlWriter
            </summary>
            <param name="provider">The provider to writer the parameters for</param>
            <param name="writer">The XmlWriter to write to</param>
            <param name="localName">The name of the outer element</param>
            <param name="includePrivateParameters">Should the private RSA parameters be included</param>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseUtilities.ReadRSAParameters(System.Security.Cryptography.RSACryptoServiceProvider,System.Xml.XmlReader,System.String)">
            <summary>
            Read RSA Parameters for an RSA Provider from an XmlReader
            </summary>
            <param name="provider">The provider to read the parameters for</param>
            <param name="reader">The XmlReader to read from</param>
            <param name="localName">The name of the element</param>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseUtilities.WriteConfigurationKey(System.Security.Cryptography.RSACryptoServiceProvider,System.Boolean)">
            <summary>
            Write RSA Parameters used to secure communications between servers to a string
            </summary>
            <param name="provider">The RSA provider to write the parameters for</param>
            <param name="includePrivateParameters">Should the private RSA parameters be included</param>
            <returns>The XML Configuration Key</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseUtilities.ReadConfigurationKey(System.String)">
            <summary>
            Read and create an RSA Provider from an ConfigurationKey (an XML string)
            </summary>
            <param name="configurationKey">The configuration key containing the parameters</param>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseUtilities.ToHex(System.Byte[])">
            <summary>
            Converts a byte array into a hexadecimal representation.
            </summary>
            <param name="data">The byte data to convert</param>
            <returns>Hexadecimal representation of the data</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseUtilities.FromHex(System.String)">
            <summary>
            Converts a hexadecimal string into a byte array.
            </summary>
            <param name="hex">The hexadecimal string to convert</param>
            <returns>The converted byte data</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseUtilities.ToBase32(System.Byte[])">
            <summary>
            Converts a byte array into a base 32 representation.
            </summary>
            <param name="data">The byte data to convert</param>
            <returns>Base32 representation of the data</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseUtilities.FromBase32(System.String)">
            <summary>
            Converts a base32 string into a byte array.
            </summary>
            <param name="str">The base32 string to convert</param>
            <returns>The converted byte data</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseUtilities.EncodeToText(System.Byte[],Infralution.Licensing.ASP.TextEncoding)">
            <summary>
            Converts a byte array into a text representation.
            </summary>
            <param name="data">The byte data to convert</param>
            <param name="encoding">The encoding to use</param>
            <returns>Text representation of the data</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseUtilities.DecodeFromText(System.String,Infralution.Licensing.ASP.TextEncoding)">
            <summary>
            Converts a string into a byte array.
            </summary>
            <param name="text">The text to convert</param>
            <param name="encoding">The encoding to use</param>
            <returns>The converted byte data</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseUtilities.CreateRSACryptoServiceProvider">
            <summary>
            Create an instance of the RSACryptoServiceProvider.
            </summary>
            <returns>An instance of the RSACryptoServiceProvider</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseUtilities.SignData(System.Security.Cryptography.RSACryptoServiceProvider,System.Byte[])">
            <summary>
            Sign the given data using the given RSA parameters
            </summary>
            <param name="rsaProvider">The RSA Provider to use</param>
            <param name="data">The data to sign</param>
            <returns>The signature for the data</returns>
            <remarks>
            Uses <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> instead of
            SignData to workaround bug in standard Microsoft 
            <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> that can cause a lengthy delay.   
            See http://support.microsoft.com/default.aspx?scid=kb;en-us;948080
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseUtilities.VerifyData(System.Security.Cryptography.RSACryptoServiceProvider,System.Byte[],System.Byte[])">
            <summary>
            Verify the signature for the given data using the given RSA parameters
            </summary>
            <param name="rsaProvider">The RSA Provider to use</param>
            <param name="data">The data to verify</param>
            <param name="signature">The signature for the data</param>
            <returns>True if the data matches the signature</returns>
            <remarks>
            Uses <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> instead of
            <see cref="M:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte[],System.Object,System.Byte[])" /> to workaround bug in standard Microsoft
            <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> that can cause a lengthy delay.  
            See http://support.microsoft.com/default.aspx?scid=kb;en-us;948080
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseUtilities.EncryptKeys(System.Security.Cryptography.RSACryptoServiceProvider,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Encrypt the keys of the given symmetric algorithm using an RSA public key 
            </summary>
            <param name="rsaProvider">The RSA provider to use to encrypt the symmetric keys</param>
            <param name="algorithm">The symmetric algorithm</param>
            <returns>String containing the encrypted keys</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseUtilities.DecryptKeys(System.Security.Cryptography.RSACryptoServiceProvider,System.Security.Cryptography.SymmetricAlgorithm,System.String)">
            <summary>
            Set the Key and IV for the given symmetric algorithm by decrypting the keys from a string 
            </summary>
            <param name="rsaProvider">The RSA provider to use to decrypt the keys</param>
            <param name="algorithm">The symmetric algorithm to set the keys for</param>
            <param name="encryptedKeys">String containing encrypted keys</param>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseUtilities.EncryptValues(System.Security.Cryptography.SymmetricAlgorithm,System.Collections.Hashtable)">
            <summary>
            Encrypt a set of key/values using the given algorithm
            </summary>
            <param name="algorithm">The algorithm to use to encrypt the data</param>
            <param name="values">A hash table containing string key/value pairs</param>
            <returns>The encrypted key/values</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseUtilities.DecryptValues(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[])">
            <summary>
            Decrypt a set of key/values using the given algorithm
            </summary>
            <param name="algorithm">The algorithm to use to decrypt the values</param>
            <param name="encryptedValues">The encrypted data</param>
            <returns>A hashtable containing the string key/values</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseUtilities.EncryptText(System.Security.Cryptography.SymmetricAlgorithm,System.String)">
            <summary>
            Encrypt text using the given algorithm
            </summary>
            <param name="algorithm">The algorithm to use to encrypt the data</param>
            <param name="text">The text to encrypt</param>
            <returns>The encrypted data</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseUtilities.DecryptText(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[])">
            <summary>
            Decrypt text using the given algorithm
            </summary>
            <param name="algorithm">The algorithm to use to decrypt the values</param>
            <param name="encryptedData">The encrypted text</param>
            <returns>The decryptedText</returns>
        </member>
        <member name="M:Infralution.Licensing.ASP.LicenseUtilities.MD5(System.String)">
            <summary>
            Return the MD5 hash of the given string value
            </summary>
            <param name="value">The string to hash</param>
            <returns>An MD5 hash of the given value</returns>
        </member>
        <member name="T:Infralution.Licensing.ASP.RegistryEvaluationMonitor">
            <summary>
            Defines an implementation of the <see cref="T:Infralution.Licensing.ASP.EvaluationMonitor" /> base class that stores
            the evaluation data in a hidden, encrypted key within the windows registry.
            </summary>
            <remarks>
                <para>
            Instantiate an instance of this class to read/write the evaluation parameters for the   
            given product.  Note that a sophisticated user could determine the 
            changes made to registry keys (using registry monitoring software) and restore the state 
            of these to their pre-installation state (thus resetting the 
            evaluation period).  For this reason it is recommended that you don't rely on this 
            mechanism alone.  You should also consider limiting the functionality of your product 
            in some way or adding nag screens to discourage long term use of evaluation versions.
            </para>
                <para>
            If you have a data oriented application you can increase the security of evaluations by
            storing the current <see cref="P:Infralution.Licensing.ASP.EvaluationMonitor.UsageCount" /> somewhere in your database each time the 
            application runs and cross checking this with the number returned by the EvaluationMonitor.
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.RegistryEvaluationMonitor.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initialize a new instance of the evaluation monitor.
            </summary>
            <param name="countUsageOncePerDay">Should the usage count only be incremented once per day</param>
            <param name="password">A unique password for this product</param>
            <param name="suppressExceptions">
            If true then any exceptions thrown while reading or creating the evaluation data are caught and ignored
            </param>
            <remarks>
            If countUsageOncePerDay is set to true then the <see cref="P:Infralution.Licensing.ASP.EvaluationMonitor.UsageCount" /> is only incremented once
            for each day that the product is actually used.   If countUsageOncePerDay is false then the 
            <see cref="P:Infralution.Licensing.ASP.EvaluationMonitor.UsageCount" /> is incremented each time a new evaluation monitor is instantiated for a product
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.RegistryEvaluationMonitor.#ctor(System.String)">
            <summary>
            Initialize a new instance of the evaluation monitor.
            </summary>
            <param name="password">A unique password for this product</param>
            <remarks>
            Same as calling RegistryEvaluationMonitor(password, false, true)
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.ASP.RegistryEvaluationMonitor.DeleteData(System.String)">
            <summary>
            Delete the evaluation data
            </summary>
            <param name="productId">The unique product Id</param>
        </member>
        <member name="M:Infralution.Licensing.ASP.RegistryEvaluationMonitor.Dispose(System.Boolean)">
            <summary>
            Free resources used by the EvaluationMonitor
            </summary>
            <param name="disposing">Is the object being disposed</param>
        </member>
    </members>
</doc>